#!/usr/bin/env python3
"""
Script de migration de PostgreSQL vers Supabase
Ce script transf√®re les donn√©es de licences de PostgreSQL local vers Supabase
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# Ajouter le r√©pertoire app au path
sys.path.append(str(Path(__file__).parent / "app"))

from app.services.connex import connect_to_postgres, load_credentials
from app.services.supabase_licences import get_supabase_client, add_license

def get_postgresql_licenses():
    """
    R√©cup√®re toutes les licences de PostgreSQL local.
    """
    print("üìä R√©cup√©ration des licences PostgreSQL...")
    
    try:
        # Charger les identifiants PostgreSQL
        creds = load_credentials()
        if not creds or 'postgresql' not in creds:
            print("‚ùå Configuration PostgreSQL manquante")
            return []
        
        pg_creds = creds['postgresql']
        
        # Se connecter √† PostgreSQL
        conn = connect_to_postgres(
            pg_creds['host'],
            pg_creds['user'],
            pg_creds['password'],
            pg_creds['database'],
            pg_creds.get('port', '5432')
        )
        
        if not conn:
            print("‚ùå Impossible de se connecter √† PostgreSQL")
            return []
        
        # R√©cup√©rer toutes les licences
        cursor = conn.cursor()
        cursor.execute("""
            SELECT license_key, client_name, client_email, company_name,
                   created_at, expires_at, is_active, last_used, 
                   usage_count, max_usage, notes
            FROM licenses
            ORDER BY created_at
        """)
        
        results = cursor.fetchall()
        cursor.close()
        conn.close()
        
        licenses = []
        for result in results:
            licenses.append({
                'license_key': result[0],
                'client_name': result[1],
                'client_email': result[2],
                'company_name': result[3],
                'created_at': result[4],
                'expires_at': result[5],
                'is_active': result[6],
                'last_used': result[7],
                'usage_count': result[8],
                'max_usage': result[9],
                'notes': result[10]
            })
        
        print(f"‚úÖ {len(licenses)} licences r√©cup√©r√©es de PostgreSQL")
        return licenses
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration PostgreSQL : {e}")
        return []

def migrate_license_to_supabase(license_data):
    """
    Migre une licence vers Supabase.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # Pr√©parer les donn√©es pour Supabase
        supabase_data = {
            'license_key': license_data['license_key'],
            'client_name': license_data['client_name'],
            'client_email': license_data['client_email'],
            'company_name': license_data['company_name'],
            'created_at': license_data['created_at'].isoformat() if license_data['created_at'] else None,
            'expires_at': license_data['expires_at'].isoformat() if license_data['expires_at'] else None,
            'is_active': license_data['is_active'],
            'last_used': license_data['last_used'].isoformat() if license_data['last_used'] else None,
            'usage_count': license_data['usage_count'],
            'max_usage': license_data['max_usage'],
            'notes': license_data['notes']
        }
        
        # Ins√©rer dans Supabase
        result = supabase.table('licenses').insert(supabase_data).execute()
        
        return len(result.data) > 0
        
    except Exception as e:
        print(f"  ‚ùå Erreur migration licence {license_data['license_key']} : {e}")
        return False

def migrate_all_licenses():
    """
    Migre toutes les licences de PostgreSQL vers Supabase.
    """
    print("üîÑ Migration PostgreSQL ‚Üí Supabase")
    print("=" * 50)
    
    # R√©cup√©rer les licences PostgreSQL
    pg_licenses = get_postgresql_licenses()
    
    if not pg_licenses:
        print("‚ùå Aucune licence √† migrer")
        return False
    
    # V√©rifier la connexion Supabase
    print("\nüîó Test de connexion Supabase...")
    supabase = get_supabase_client()
    if not supabase:
        print("‚ùå Impossible de se connecter √† Supabase")
        return False
    print("‚úÖ Connexion Supabase OK")
    
    # Migrer chaque licence
    print(f"\nüì¶ Migration de {len(pg_licenses)} licences...")
    
    success_count = 0
    error_count = 0
    
    for i, license_data in enumerate(pg_licenses, 1):
        print(f"  [{i}/{len(pg_licenses)}] Migration : {license_data['client_name']}")
        
        if migrate_license_to_supabase(license_data):
            success_count += 1
            print(f"    ‚úÖ Migr√©e")
        else:
            error_count += 1
            print(f"    ‚ùå √âchec")
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√©sum√© de la migration :")
    print(f"  Total : {len(pg_licenses)} licences")
    print(f"  Succ√®s : {success_count} licences")
    print(f"  √âchecs : {error_count} licences")
    
    if success_count > 0:
        print("\n‚úÖ Migration termin√©e avec succ√®s !")
        return True
    else:
        print("\n‚ùå Aucune licence migr√©e")
        return False

def verify_migration():
    """
    V√©rifie que la migration s'est bien pass√©e.
    """
    print("\nüîç V√©rification de la migration...")
    
    try:
        # R√©cup√©rer les licences Supabase
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        result = supabase.table('licenses').select('*').execute()
        supabase_licenses = result.data
        
        # R√©cup√©rer les licences PostgreSQL
        pg_licenses = get_postgresql_licenses()
        
        print(f"  PostgreSQL : {len(pg_licenses)} licences")
        print(f"  Supabase : {len(supabase_licenses)} licences")
        
        if len(supabase_licenses) >= len(pg_licenses):
            print("  ‚úÖ Migration v√©rifi√©e")
            return True
        else:
            print("  ‚ùå Donn√©es manquantes dans Supabase")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erreur v√©rification : {e}")
        return False

def create_backup():
    """
    Cr√©e une sauvegarde des donn√©es PostgreSQL.
    """
    print("üíæ Cr√©ation d'une sauvegarde...")
    
    try:
        # R√©cup√©rer les licences PostgreSQL
        pg_licenses = get_postgresql_licenses()
        
        if not pg_licenses:
            print("‚ùå Aucune donn√©e √† sauvegarder")
            return False
        
        # Cr√©er le fichier de sauvegarde
        backup_file = f"backup_licenses_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(pg_licenses, f, indent=2, default=str)
        
        print(f"‚úÖ Sauvegarde cr√©√©e : {backup_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde : {e}")
        return False

def main():
    """
    Fonction principale de migration.
    """
    print("üîÑ Script de migration PostgreSQL ‚Üí Supabase")
    print("=" * 60)
    
    # V√©rifier les variables d'environnement
    if not os.getenv("SUPABASE_URL") or not os.getenv("SUPABASE_KEY"):
        print("‚ùå Variables d'environnement Supabase manquantes")
        print("Veuillez d√©finir SUPABASE_URL et SUPABASE_KEY")
        return False
    
    # Menu principal
    while True:
        print("\nOptions disponibles :")
        print("1. Cr√©er une sauvegarde PostgreSQL")
        print("2. Migrer toutes les licences")
        print("3. V√©rifier la migration")
        print("4. Migration compl√®te (sauvegarde + migration + v√©rification)")
        print("5. Quitter")
        
        choice = input("\nChoisissez une option (1-5) : ").strip()
        
        if choice == "1":
            create_backup()
        elif choice == "2":
            migrate_all_licenses()
        elif choice == "3":
            verify_migration()
        elif choice == "4":
            print("\nüîÑ Migration compl√®te...")
            if create_backup():
                if migrate_all_licenses():
                    verify_migration()
        elif choice == "5":
            print("üëã Au revoir !")
            break
        else:
            print("‚ùå Option invalide")

if __name__ == "__main__":
    main() 