#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour tester la r√©cup√©ration des donn√©es de la table REPARAT
"""

import sys
import os
from tabulate import tabulate

# Ajouter le r√©pertoire app au path pour importer les modules
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from services.connex import connect_to_hfsql, load_credentials

def test_reparat_data():
    """Teste la r√©cup√©ration des donn√©es de la table REPARAT"""
    print("üîç Test des donn√©es de la table REPARAT")
    print("=" * 50)
    
    # Charger la configuration
    creds = load_credentials()
    if not creds or creds.get("software") != "codial" or "hfsql" not in creds:
        print("‚ùå Configuration HFSQL non trouv√©e")
        return False
    
    hfsql_config = creds["hfsql"]
    host_value = f"DSN={hfsql_config['dsn']}" if hfsql_config.get("dsn") else hfsql_config.get("host", "localhost")
    
    print(f"üîå Connexion √† HFSQL...")
    print(f"   DSN: {hfsql_config.get('dsn')}")
    print(f"   Base: {hfsql_config.get('database')}")
    
    conn = connect_to_hfsql(
        host_value,
        hfsql_config.get("user", "admin"),
        hfsql_config.get("password", ""),
        hfsql_config.get("database", "HFSQL"),
        hfsql_config.get("port", "4900")
    )
    
    if not conn:
        print("‚ùå √âchec de la connexion")
        return False
    
    print("‚úÖ Connexion r√©ussie")
    
    try:
        cursor = conn.cursor()
        
        # Test 1: Compter les enregistrements
        print("\nüìä Test 1: Compter les enregistrements")
        try:
            cursor.execute("SELECT COUNT(*) as total FROM REPARAT")
            result = cursor.fetchone()
            count = result[0] if result else 0
            print(f"   ‚úÖ Nombre d'enregistrements: {count}")
        except Exception as e:
            print(f"   ‚ùå Erreur comptage: {e}")
            return False
        
        # Test 2: R√©cup√©rer les colonnes disponibles
        print("\nüìã Test 2: Structure de la table")
        try:
            cursor.execute("SELECT TOP 1 * FROM REPARAT")
            columns = [description[0] for description in cursor.description]
            print(f"   ‚úÖ Colonnes trouv√©es: {len(columns)}")
            print(f"   üìù Colonnes: {', '.join(columns)}")
        except Exception as e:
            print(f"   ‚ùå Erreur structure: {e}")
            return False
        
        # Test 3: R√©cup√©rer quelques enregistrements
        print("\nüìÑ Test 3: R√©cup√©ration des donn√©es")
        queries_to_try = [
            "SELECT TOP 5 R1CLEUNIK, NUMEROR, CODE, NOM FROM REPARAT",
            "SELECT TOP 3 R1CLEUNIK, NUMEROR, CODE, NOM, ADRESSE1, VILLE FROM REPARAT",
            "SELECT TOP 2 * FROM REPARAT"
        ]
        
        for i, query in enumerate(queries_to_try, 1):
            try:
                print(f"\n   Requ√™te {i}: {query}")
                cursor.execute(query)
                results = cursor.fetchall()
                
                if results:
                    columns = [description[0] for description in cursor.description]
                    print(f"   ‚úÖ {len(results)} enregistrement(s) r√©cup√©r√©(s)")
                    
                    # Afficher les r√©sultats dans un tableau
                    print(f"\n   üìä R√©sultats:")
                    table = tabulate(results, headers=columns, tablefmt="grid", stralign="left")
                    print(table)
                    
                    # Si on a r√©ussi, on s'arr√™te ici
                    break
                else:
                    print(f"   ‚ö†Ô∏è  Aucun r√©sultat")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur requ√™te {i}: {e}")
                continue
        
        cursor.close()
        conn.close()
        
        print("\nüéâ Test termin√© avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        if conn:
            conn.close()
        return False

def main():
    """Fonction principale"""
    print("üöÄ Test des donn√©es REPARAT")
    print("=" * 50)
    
    success = test_reparat_data()
    
    if success:
        print("\n‚úÖ Les donn√©es sont accessibles!")
        print("üí° Le probl√®me vient probablement de l'interface web.")
        print("   V√©rifiez que le serveur web fonctionne et testez la route /query-hfsql-reparat")
    else:
        print("\n‚ùå Probl√®me d'acc√®s aux donn√©es")
        print("üí° V√©rifiez la configuration HFSQL")

if __name__ == "__main__":
    main()
