#!/usr/bin/env python3
# Script de configuration du syst√®me de licences
# Ce script aide √† configurer la base de donn√©es PostgreSQL

import json
import os
import sys
from pathlib import Path

def create_credentials_file():
    """Cr√©e le fichier de configuration des identifiants."""
    credentials_file = Path("app/services/credentials.json")
    
    if credentials_file.exists():
        print("‚úÖ Le fichier credentials.json existe d√©j√†")
        return True
    
    print("üîß Configuration de la base de donn√©es PostgreSQL")
    print("=" * 50)
    
    # Demander les informations de connexion
    host = input("Host PostgreSQL (localhost): ").strip() or "localhost"
    port = input("Port PostgreSQL (5432): ").strip() or "5432"
    user = input("Utilisateur PostgreSQL: ").strip()
    password = input("Mot de passe PostgreSQL: ").strip()
    database = input("Nom de la base de donn√©es: ").strip()
    
    if not user or not password or not database:
        print("‚ùå Toutes les informations sont requises")
        return False
    
    # Cr√©er la configuration
    config = {
        "postgresql": {
            "host": host,
            "user": user,
            "password": password,
            "database": database,
            "port": port
        }
    }
    
    # Cr√©er le r√©pertoire si n√©cessaire
    credentials_file.parent.mkdir(parents=True, exist_ok=True)
    
    # Sauvegarder la configuration
    try:
        with open(credentials_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print("‚úÖ Fichier credentials.json cr√©√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du fichier: {e}")
        return False

def test_database_connection():
    """Teste la connexion √† la base de donn√©es."""
    try:
        from app.services.connex import connect_to_postgres, load_credentials
        
        creds = load_credentials()
        if not creds or 'postgresql' not in creds:
            print("‚ùå Configuration PostgreSQL manquante")
            return False
        
        pg_creds = creds['postgresql']
        conn = connect_to_postgres(
            pg_creds['host'],
            pg_creds['user'],
            pg_creds['password'],
            pg_creds['database'],
            pg_creds.get('port', '5432')
        )
        
        if conn:
            print("‚úÖ Connexion √† PostgreSQL r√©ussie")
            conn.close()
            return True
        else:
            print("‚ùå √âchec de connexion √† PostgreSQL")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de connexion: {e}")
        return False

def setup_database():
    """Configure la base de donn√©es pour les licences."""
    try:
        from app.services.licences import create_licenses_table
        from app.services.connex import connect_to_postgres, load_credentials
        
        creds = load_credentials()
        if not creds or 'postgresql' not in creds:
            print("‚ùå Configuration PostgreSQL manquante")
            return False
        
        pg_creds = creds['postgresql']
        conn = connect_to_postgres(
            pg_creds['host'],
            pg_creds['user'],
            pg_creds['password'],
            pg_creds['database'],
            pg_creds.get('port', '5432')
        )
        
        if not conn:
            print("‚ùå Impossible de se connecter √† PostgreSQL")
            return False
        
        # Cr√©er la table licenses
        success = create_licenses_table(conn)
        conn.close()
        
        if success:
            print("‚úÖ Table licenses cr√©√©e avec succ√®s")
            return True
        else:
            print("‚ùå √âchec de cr√©ation de la table licenses")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration de la base: {e}")
        return False

def create_sample_license():
    """Cr√©e une licence d'exemple."""
    try:
        from app.services.licences import add_license
        from app.services.connex import connect_to_postgres, load_credentials
        
        creds = load_credentials()
        if not creds or 'postgresql' not in creds:
            print("‚ùå Configuration PostgreSQL manquante")
            return False
        
        pg_creds = creds['postgresql']
        conn = connect_to_postgres(
            pg_creds['host'],
            pg_creds['user'],
            pg_creds['password'],
            pg_creds['database'],
            pg_creds.get('port', '5432')
        )
        
        if not conn:
            print("‚ùå Impossible de se connecter √† PostgreSQL")
            return False
        
        # Cr√©er une licence d'exemple
        license_key = add_license(
            conn=conn,
            client_name="Client Test",
            client_email="test@example.com",
            company_name="Entreprise Test",
            duration_days=30,
            max_usage=100,
            notes="Licence d'exemple pour les tests"
        )
        
        conn.close()
        
        if license_key:
            print(f"‚úÖ Licence d'exemple cr√©√©e: {license_key}")
            return True
        else:
            print("‚ùå √âchec de cr√©ation de la licence d'exemple")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la licence: {e}")
        return False

def main():
    """Fonction principale de configuration."""
    print("üîß Configuration du syst√®me de licences")
    print("=" * 50)
    
    # √âtape 1: Cr√©er le fichier de configuration
    if not create_credentials_file():
        return
    
    # √âtape 2: Tester la connexion
    if not test_database_connection():
        print("\nüí° V√©rifiez que:")
        print("   - PostgreSQL est d√©marr√©")
        print("   - Les identifiants sont corrects")
        print("   - La base de donn√©es existe")
        return
    
    # √âtape 3: Configurer la base de donn√©es
    if not setup_database():
        return
    
    # √âtape 4: Cr√©er une licence d'exemple
    create_sample = input("\nCr√©er une licence d'exemple ? (o/n): ").strip().lower()
    if create_sample in ['o', 'oui', 'y', 'yes']:
        create_sample_license()
    
    print("\nüéâ Configuration termin√©e !")
    print("\nüìã Prochaines √©tapes:")
    print("   1. D√©marrez l'application: python -m uvicorn app.main:app --reload")
    print("   2. Acc√©dez √† l'interface: http://localhost:8000/licenses/")
    print("   3. Testez le syst√®me: python test_licenses.py")

if __name__ == "__main__":
    main() 