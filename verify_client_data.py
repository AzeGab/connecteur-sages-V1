#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour v√©rifier si les donn√©es de la capture correspondent √† la table CLIENT
"""

import sys
import os
from tabulate import tabulate

# Ajouter le r√©pertoire app au path pour importer les modules
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from services.connex import connect_to_hfsql, load_credentials

def verify_client_data():
    """V√©rifie si les donn√©es de la capture correspondent √† la table CLIENT"""
    print("üîç V√©rification des donn√©es de la table CLIENT")
    print("=" * 60)
    
    # Charger la configuration
    creds = load_credentials()
    if not creds or creds.get("software") != "codial" or "hfsql" not in creds:
        print("‚ùå Configuration HFSQL non trouv√©e")
        return False
    
    hfsql_config = creds["hfsql"]
    host_value = f"DSN={hfsql_config['dsn']}" if hfsql_config.get("dsn") else hfsql_config.get("host", "localhost")
    
    print(f"üîå Connexion √† HFSQL...")
    print(f"   DSN: {hfsql_config.get('dsn')}")
    print(f"   Base: {hfsql_config.get('database')}")
    
    conn = connect_to_hfsql(
        host_value,
        hfsql_config.get("user", "admin"),
        hfsql_config.get("password", ""),
        hfsql_config.get("database", "HFSQL"),
        hfsql_config.get("port", "4900")
    )
    
    if not conn:
        print("‚ùå √âchec de la connexion")
        return False
    
    print("‚úÖ Connexion r√©ussie")
    
    try:
        cursor = conn.cursor()
        
        # V√©rifier la structure de la table CLIENT
        print("\nüìã Structure de la table CLIENT")
        cursor.execute("SELECT TOP 1 * FROM CLIENT")
        columns = [description[0] for description in cursor.description]
        print(f"   üìù Nombre de colonnes: {len(columns)}")
        print(f"   üìù Premi√®res colonnes: {', '.join(columns[:15])}")
        
        # V√©rifier si les colonnes correspondent √† votre capture
        expected_columns = ['r1cleunik', 'numeror', 'code', 'genre', 'nom', 'adresse1', 'adresse2', 'cop', 'ville', 'marque', 'type']
        found_columns = [col.lower() for col in columns]
        matching_columns = [col for col in expected_columns if col in found_columns]
        
        print(f"\nüéØ Colonnes correspondantes √† votre capture:")
        print(f"   ‚úÖ Trouv√©es: {matching_columns}")
        print(f"   ‚ùå Manquantes: {[col for col in expected_columns if col not in found_columns]}")
        
        if len(matching_columns) >= 8:  # Au moins 8 colonnes correspondent
            print(f"\nüéâ La table CLIENT semble correspondre √† vos donn√©es!")
            
            # R√©cup√©rer quelques enregistrements pour v√©rification
            print(f"\nüìä Aper√ßu des donn√©es CLIENT:")
            try:
                cursor.execute("SELECT TOP 5 R1CLEUNIK, NUMEROR, CODE, NOM, ADRESSE1, VILLE FROM CLIENT")
                results = cursor.fetchall()
                
                if results:
                    columns_display = [description[0] for description in cursor.description]
                    table = tabulate(results, headers=columns_display, tablefmt="grid", stralign="left")
                    print(table)
                    
                    # V√©rifier si on trouve des donn√©es similaires √† votre capture
                    print(f"\nüîç Recherche de donn√©es sp√©cifiques de votre capture:")
                    
                    # Chercher "ABED (SARL)"
                    cursor.execute("SELECT R1CLEUNIK, NUMEROR, CODE, NOM, ADRESSE1, VILLE FROM CLIENT WHERE NOM LIKE '%ABED%'")
                    abed_results = cursor.fetchall()
                    if abed_results:
                        print(f"   ‚úÖ Trouv√© 'ABED': {abed_results[0]}")
                    
                    # Chercher "DANIERE FLORENCE"
                    cursor.execute("SELECT R1CLEUNIK, NUMEROR, CODE, NOM, ADRESSE1, VILLE FROM CLIENT WHERE NOM LIKE '%DANIERE%'")
                    daniere_results = cursor.fetchall()
                    if daniere_results:
                        print(f"   ‚úÖ Trouv√© 'DANIERE': {daniere_results[0]}")
                    
                    # Chercher "DURAND ALAIN"
                    cursor.execute("SELECT R1CLEUNIK, NUMEROR, CODE, NOM, ADRESSE1, VILLE FROM CLIENT WHERE NOM LIKE '%DURAND%'")
                    durand_results = cursor.fetchall()
                    if durand_results:
                        print(f"   ‚úÖ Trouv√© 'DURAND': {durand_results[0]}")
                    
                    print(f"\nüéØ CONCLUSION: Les donn√©es de votre capture sont dans la table CLIENT, pas REPARAT!")
                    print(f"   üí° Il faut modifier la requ√™te pour utiliser SELECT * FROM CLIENT")
                    
                else:
                    print("   ‚ö†Ô∏è  Aucun r√©sultat trouv√©")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur lors de la r√©cup√©ration des donn√©es: {e}")
        else:
            print(f"\n‚ö†Ô∏è  La table CLIENT ne correspond pas exactement √† vos donn√©es")
            print(f"   üìù Colonnes attendues: {expected_columns}")
            print(f"   üìù Colonnes trouv√©es: {found_columns}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ V√©rification termin√©e!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        if conn:
            conn.close()
        return False

def main():
    """Fonction principale"""
    print("üöÄ V√©rification des donn√©es CLIENT")
    print("=" * 60)
    
    success = verify_client_data()
    
    if success:
        print("\n‚úÖ V√©rification termin√©e avec succ√®s!")
    else:
        print("\n‚ùå Probl√®me lors de la v√©rification")

if __name__ == "__main__":
    main()
