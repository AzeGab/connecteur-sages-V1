#!/usr/bin/env python3
# Script de test PostgreSQL simple

import psycopg2
import sys

def test_postgresql_connection():
    """Test simple de connexion PostgreSQL."""
    
    print("üîç Test de connexion PostgreSQL")
    print("=" * 40)
    
    # Param√®tres de test
    host = "localhost"
    port = "5432"
    user = "postgres"
    password = "admin"  # Changez selon votre configuration
    database = "licences"  # Changez selon votre configuration
    
    print(f"Tentative de connexion √† {host}:{port}")
    print(f"Utilisateur: {user}")
    print(f"Base de donn√©es: {database}")
    
    try:
        # Test de connexion
        conn = psycopg2.connect(
            host=host,
            dbname=database,
            user=user,
            password=password,
            port=port
        )
        
        print("‚úÖ Connexion PostgreSQL r√©ussie !")
        
        # Test de requ√™te simple
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ Version PostgreSQL: {version[0]}")
        
        cursor.close()
        conn.close()
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erreur de connexion: {e}")
        print("\nüí° Solutions possibles:")
        print("1. V√©rifiez que PostgreSQL est d√©marr√©")
        print("2. V√©rifiez le mot de passe")
        print("3. V√©rifiez que la base de donn√©es existe")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def create_database_if_not_exists():
    """Cr√©e la base de donn√©es si elle n'existe pas."""
    
    print("\nüîß Cr√©ation de la base de donn√©es si n√©cessaire")
    print("=" * 50)
    
    try:
        # Connexion √† la base postgres par d√©faut
        conn = psycopg2.connect(
            host="localhost",
            dbname="postgres",
            user="postgres",
            password="admin",  # Changez selon votre configuration
            port="5432"
        )
        
        # D√©sactiver l'autocommit pour permettre CREATE DATABASE
        conn.autocommit = True
        
        cursor = conn.cursor()
        
        # V√©rifier si la base existe
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'licences';")
        exists = cursor.fetchone()
        
        if not exists:
            print("üìù Cr√©ation de la base de donn√©es 'licences'...")
            cursor.execute("CREATE DATABASE licences;")
            print("‚úÖ Base de donn√©es 'licences' cr√©√©e")
        else:
            print("‚úÖ Base de donn√©es 'licences' existe d√©j√†")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base: {e}")
        return False

def main():
    """Fonction principale."""
    
    # √âtape 1: Cr√©er la base si n√©cessaire
    if not create_database_if_not_exists():
        print("‚ùå Impossible de cr√©er la base de donn√©es")
        return
    
    # √âtape 2: Tester la connexion
    if test_postgresql_connection():
        print("\nüéâ PostgreSQL est correctement configur√© !")
        print("Vous pouvez maintenant ex√©cuter: python configure_postgresql.py")
    else:
        print("\n‚ùå Probl√®me avec PostgreSQL")
        print("V√©rifiez l'installation et la configuration")

if __name__ == "__main__":
    main() 