# -*- coding: utf-8 -*-
# Module de gestion des licences avec Supabase
# ---------------------------------------------
# Ce fichier centralise toutes les fonctions pour la cr√©ation, validation,
# et gestion des licences en interagissant avec la base de donn√©es Supabase.

import hashlib
import datetime
import uuid
import json
import os
from typing import Optional, Dict, List, Tuple
import requests
from supabase import create_client, Client

# ============================================================================
# CONFIGURATION SUPABASE
# ============================================================================

# R√©cup√®re l'URL de Supabase depuis les variables d'environnement.
# Une valeur par d√©faut est utilis√©e si la variable n'est pas d√©finie.
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://your-project.supabase.co")

# R√©cup√®re la cl√© API "anon" de Supabase depuis les variables d'environnement.
# C'est une cl√© publique et s√©curis√©e, utilisable c√¥t√© client.
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "your-anon-key")

# Cl√© secr√®te utilis√©e pour rendre la g√©n√©ration de hash de licence unique.
# √Ä garder secr√®te et √† ne pas exposer c√¥t√© client.
SECRET_KEY = "connecteur-sages-v1-secret-key-2024"

# Dur√©e de validit√© standard pour une nouvelle licence, en jours.
DEFAULT_LICENSE_DURATION = 365

# ============================================================================
# INITIALISATION SUPABASE
# ============================================================================

def get_supabase_client() -> Optional[Client]:
    """
    Initialise et retourne un client Supabase.

    Cette fonction est le point d'entr√©e pour toute communication avec Supabase.
    Elle utilise les variables d'environnement SUPABASE_URL et SUPABASE_KEY.

    Returns:
        Client: Une instance du client Supabase, ou None en cas d'erreur.
    """
    try:
        # Cr√©e le client en utilisant les informations de configuration.
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        return supabase
    except Exception as e:
        # Affiche une erreur claire si l'initialisation √©choue.
        print(f"‚ùå Erreur lors de l'initialisation du client Supabase: {e}")
        return None

# ============================================================================
# G√âN√âRATION ET VALIDATION DES CL√âS
# ============================================================================

def generate_license_key(client_name: str, client_email: str, duration_days: int = DEFAULT_LICENSE_DURATION) -> str:
    """
    G√©n√®re une cl√© de licence unique et d√©terministe bas√©e sur les informations du client.

    La cl√© est un hash SHA-256 d'une cha√Æne combinant les d√©tails du client
    et une cl√© secr√®te, garantissant son unicit√©.

    Args:
        client_name (str): Le nom du client.
        client_email (str): L'email du client.
        duration_days (int): La dur√©e de validit√© de la licence en jours.

    Returns:
        str: La cl√© de licence g√©n√©r√©e, format√©e pour la lisibilit√© (ex: XXXX-XXXX-...).
    """
    # Cr√©e une cha√Æne unique pour le hashing.
    unique_string = f"{client_name}:{client_email}:{duration_days}:{SECRET_KEY}"
    
    # G√©n√®re un hash SHA-256 pour garantir une cl√© non-devinable.
    hash_object = hashlib.sha256(unique_string.encode())
    hash_hex = hash_object.hexdigest()
    
    # Formate la cl√© en groupes de 4 caract√®res pour une meilleure lisibilit√©.
    # On ne prend que les 32 premiers caract√®res du hash pour une cl√© plus courte.
    formatted_key = '-'.join([hash_hex[i:i+4] for i in range(0, 32, 4)])
    
    return formatted_key.upper()

def validate_license_key(license_key: str) -> bool:
    """
    Valide le format d'une cl√© de licence (longueur, caract√®res hexad√©cimaux).

    Args:
        license_key (str): La cl√© de licence √† v√©rifier.

    Returns:
        bool: True si le format est valide, False sinon.
    """
    if not license_key:
        return False
    
    # Nettoie la cl√© en retirant les tirets et les espaces.
    clean_key = license_key.replace('-', '').replace(' ', '')
    # Une cl√© valide doit contenir 32 caract√®res hexad√©cimaux.
    if len(clean_key) != 32:
        return False
    
    # V√©rifie que tous les caract√®res sont bien hexad√©cimaux.
    try:
        int(clean_key, 16)
        return True
    except ValueError:
        return False

# ============================================================================
# GESTION DES LICENCES DANS SUPABASE (CRUD)
# ============================================================================

def create_licenses_table() -> bool:
    """
    Fournit le script SQL pour cr√©er la table 'licenses' dans Supabase.

    Note: Cette fonction n'ex√©cute pas le SQL. L'utilisateur doit le copier
    et l'ex√©cuter dans l'√©diteur SQL de l'interface Supabase pour des raisons
    de s√©curit√© et de permissions.

    Returns:
        bool: Toujours True pour indiquer que le script a √©t√© fourni.
    """
    # Le SQL est fourni comme une aide pour l'administrateur.
    # Les op√©rations de type DDL (Data Definition Language) sont g√©n√©ralement
    # g√©r√©es via des migrations ou directement dans l'interface Supabase.
    create_table_sql = """
    -- Script de cr√©ation de la table des licences
    CREATE TABLE IF NOT EXISTS public.licenses (
        id BIGSERIAL PRIMARY KEY,
        license_key VARCHAR(255) UNIQUE NOT NULL,
        client_name VARCHAR(255) NOT NULL,
        client_email VARCHAR(255) NOT NULL,
        company_name VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        last_used TIMESTAMP WITH TIME ZONE,
        usage_count INTEGER DEFAULT 0,
        max_usage INTEGER DEFAULT -1, -- -1 signifie illimit√©
        notes TEXT
    );
    
    -- Index pour acc√©l√©rer les recherches par cl√© de licence
    CREATE INDEX IF NOT EXISTS idx_licenses_license_key ON public.licenses(license_key);
    
    -- Index pour filtrer rapidement les licences actives/inactives
    CREATE INDEX IF NOT EXISTS idx_licenses_is_active ON public.licenses(is_active);
    """
    
    print("üìù Veuillez ex√©cuter le SQL suivant dans l'interface SQL de Supabase pour cr√©er la table:")
    print(create_table_sql)
    return True

def add_license(client_name: str, client_email: str, company_name: Optional[str] = None, 
                duration_days: int = DEFAULT_LICENSE_DURATION, max_usage: int = -1, notes: Optional[str] = None) -> Optional[str]:
    """
    Ajoute une nouvelle licence dans la base de donn√©es Supabase.

    Args:
        client_name (str): Nom du client.
        client_email (str): Email du client.
        company_name (Optional[str]): Nom de l'entreprise (facultatif).
        duration_days (int): Dur√©e de validit√© en jours.
        max_usage (int): Nombre maximum d'utilisations (-1 pour illimit√©).
        notes (Optional[str]): Notes additionnelles (facultatif).

    Returns:
        str: La cl√© de licence g√©n√©r√©e si l'ajout a r√©ussi, sinon None.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return None
        
        # G√©n√®re une nouvelle cl√© unique.
        license_key = generate_license_key(client_name, client_email, duration_days)
        
        # Calcule la date d'expiration √† partir de la date actuelle.
        expires_at = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(days=duration_days)
        
        # Pr√©pare l'objet de donn√©es √† ins√©rer.
        license_data = {
            'license_key': license_key,
            'client_name': client_name,
            'client_email': client_email,
            'company_name': company_name,
            'expires_at': expires_at.isoformat(),
            'max_usage': max_usage,
            'notes': notes,
            'is_active': True,
            'usage_count': 0
        }
        
        # Ins√®re les donn√©es dans la table 'licenses'.
        result = supabase.table('licenses').insert(license_data).execute()
        
        # V√©rifie que l'insertion a r√©ussi.
        if result.data:
            print(f"‚úÖ Licence cr√©√©e avec succ√®s pour {client_name}")
            return license_key
        else:
            print(f"‚ùå Erreur lors de l'ajout de la licence √† Supabase: {result.error.message if result.error else 'Raison inconnue'}")
            return None
        
    except Exception as e:
        print(f"‚ùå Erreur fonctionnelle lors de l'ajout de la licence: {e}")
        return None

def get_license_info(license_key: str) -> Optional[Dict]:
    """
    R√©cup√®re les informations d√©taill√©es d'une licence sp√©cifique depuis Supabase.

    Args:
        license_key (str): La cl√© de licence √† rechercher.

    Returns:
        dict: Un dictionnaire contenant les informations de la licence, 
              ou None si la licence n'est pas trouv√©e.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return None
        
        # Recherche la licence par sa cl√© unique.
        # .single() garantit qu'on attend une seule ligne et la retourne directement.
        result = supabase.table('licenses').select('*').eq('license_key', license_key).single().execute()
        
        license_info = result.data
        if license_info:
            # --- Standardisation des dates ---
            # Convertit les cha√Ænes de date ISO 8601 de la DB en objets datetime Python
            # pour faciliter les manipulations (calculs, formatage).
            if license_info.get('created_at'):
                license_info['created_at'] = datetime.datetime.fromisoformat(license_info['created_at'].replace('Z', '+00:00'))
            if license_info.get('expires_at'):
                license_info['expires_at'] = datetime.datetime.fromisoformat(license_info['expires_at'].replace('Z', '+00:00'))
            if license_info.get('last_used'):
                license_info['last_used'] = datetime.datetime.fromisoformat(license_info['last_used'].replace('Z', '+00:00'))
            
            return license_info
        return None
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la licence: {e}")
        return None

def get_all_licenses() -> List[Dict]:
    """
    R√©cup√®re la liste de toutes les licences enregistr√©es dans Supabase.

    Returns:
        list: Une liste de dictionnaires, o√π chaque dictionnaire repr√©sente une licence.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return []
        
        # R√©cup√®re toutes les lignes de la table, tri√©es par date de cr√©ation.
        result = supabase.table('licenses').select('*').order('created_at', desc=True).execute()
        
        if not result.data:
            return []
            
        licenses = []
        for license_data in result.data:
            # Standardise les dates pour chaque licence de la liste.
            if license_data.get('created_at'):
                license_data['created_at'] = datetime.datetime.fromisoformat(license_data['created_at'].replace('Z', '+00:00'))
            if license_data.get('expires_at'):
                license_data['expires_at'] = datetime.datetime.fromisoformat(license_data['expires_at'].replace('Z', '+00:00'))
            if license_data.get('last_used'):
                license_data['last_used'] = datetime.datetime.fromisoformat(license_data['last_used'].replace('Z', '+00:00'))
            
            licenses.append(license_data)
        
        return licenses
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des licences: {e}")
        return []

def validate_license(license_key: str) -> Tuple[bool, str]:
    """
    Valide une licence en v√©rifiant son format, son existence, son statut et sa date d'expiration.

    Args:
        license_key (str): La cl√© de licence √† valider.

    Returns:
        tuple: Un tuple (bool, str) contenant:
               - True si la licence est valide, False sinon.
               - Un message d√©crivant le statut ("Licence valide", "Licence expir√©e", etc.).
    """
    # 1. V√©rifier le format de la cl√©.
    if not validate_license_key(license_key):
        return False, "Format de cl√© de licence invalide"
    
    # 2. R√©cup√©rer les informations de la licence.
    license_info = get_license_info(license_key)
    if not license_info:
        return False, "Licence non trouv√©e"
    
    # 3. Utiliser la logique de get_license_status_text pour d√©terminer le statut.
    status_text = get_license_status_text(license_info)
    
    if status_text == "Active":
        return True, "Licence valide"
    else:
        return False, status_text

def update_license_usage(license_key: str) -> bool:
    """
    Met √† jour les statistiques d'utilisation d'une licence apr√®s une validation r√©ussie.
    Incr√©mente le compteur d'utilisation et met √† jour la date de derni√®re utilisation.

    Args:
        license_key (str): La cl√© de licence √† mettre √† jour.

    Returns:
        bool: True si la mise √† jour a r√©ussi, False sinon.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # R√©cup√®re le compteur d'utilisation actuel.
        license_info = get_license_info(license_key)
        if not license_info:
            return False
        current_usage = license_info.get('usage_count', 0)
        
        # Pr√©pare les donn√©es √† mettre √† jour.
        update_data = {
            'last_used': datetime.datetime.now(datetime.timezone.utc).isoformat(),
            'usage_count': current_usage + 1
        }
        
        # Ex√©cute la mise √† jour.
        result = supabase.table('licenses').update(update_data).eq('license_key', license_key).execute()
        
        return bool(result.data)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour de l'utilisation: {e}")
        return False

def deactivate_license(license_key: str) -> bool:
    """
    D√©sactive une licence en passant son champ 'is_active' √† False.

    Args:
        license_key (str): La cl√© de licence √† d√©sactiver.

    Returns:
        bool: True si la d√©sactivation a r√©ussi, False sinon.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # Met √† jour le champ 'is_active'.
        result = supabase.table('licenses').update({'is_active': False}).eq('license_key', license_key).execute()
        
        if result.data:
            print(f"‚úÖ Licence {license_key} d√©sactiv√©e")
            return True
        else:
            print(f"‚ùå Erreur lors de la d√©sactivation de la licence {license_key}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©sactivation: {e}")
        return False

def reactivate_license(license_key: str) -> bool:
    """
    R√©active une licence qui a √©t√© d√©sactiv√©e.

    Args:
        license_key (str): La cl√© de licence √† r√©activer.

    Returns:
        bool: True si la r√©activation a r√©ussi, False sinon.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # Met √† jour le champ 'is_active' pour le passer √† True.
        result = supabase.table('licenses').update({'is_active': True}).eq('license_key', license_key).execute()
        
        if result.data:
            print(f"‚úÖ Licence {license_key} r√©activ√©e")
            return True
        else:
            print(f"‚ùå Erreur lors de la r√©activation de la licence {license_key}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©activation: {e}")
        return False

def extend_license(license_key: str, days_to_add: int) -> bool:
    """
    Prolonge la dur√©e de validit√© d'une licence en ajoutant un nombre de jours.
    
    Args:
        license_key (str): La cl√© de licence √† prolonger.
        days_to_add (int): Le nombre de jours √† ajouter √† la date d'expiration.
        
    Returns:
        bool: True si la prolongation a r√©ussi, False sinon.
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
            
        # R√©cup√®re les informations actuelles, y compris la date d'expiration.
        license_info = get_license_info(license_key)
        if not license_info:
            print(f"‚ùå Licence {license_key} non trouv√©e pour la prolongation.")
            return False
            
        # get_license_info retourne d√©j√† un objet datetime, pas besoin de reconvertir.
        expires_at = license_info.get('expires_at')
        if not expires_at:
            print(f"‚ùå La licence {license_key} n'a pas de date d'expiration.")
            return False
        
        # Calcule la nouvelle date d'expiration.
        new_expires_at = expires_at + datetime.timedelta(days=days_to_add)
        
        # Met √† jour la licence avec la nouvelle date.
        result = supabase.table('licenses').update({
            'expires_at': new_expires_at.isoformat()
        }).eq('license_key', license_key).execute()
        
        if result.data:
            print(f"‚úÖ Licence {license_key} prolong√©e de {days_to_add} jours.")
            return True
        else:
            print(f"‚ùå Erreur lors de la prolongation de la licence {license_key}.")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la prolongation: {e}")
        return False

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

def format_license_key(license_key: str) -> str:
    """
    Formate une cl√© de licence pour un affichage standard (groupes de 4).
    
    Args:
        license_key (str): Cl√© de licence brute.
        
    Returns:
        str: La cl√© format√©e (ex: XXXX-XXXX-...).
    """
    clean_key = license_key.replace('-', '').replace(' ', '')
    return '-'.join([clean_key[i:i+4] for i in range(0, 32, 4)]).upper()

def get_license_status_text(license_info: Dict) -> str:
    """
    Retourne une cha√Æne de caract√®res d√©crivant le statut d'une licence.
    Cette fonction est principalement utilis√©e pour l'affichage dans l'interface.
    
    Args:
        license_info (dict): Le dictionnaire contenant les donn√©es de la licence.
        
    Returns:
        str: Le statut textuel ("Active", "Expir√©e", "D√©sactiv√©e", "Limite atteinte").
    """
    # Priorit√© 1: la licence est-elle d√©sactiv√©e manuellement ?
    if not license_info.get('is_active'):
        return "D√©sactiv√©e"
    
    expires_at = license_info.get('expires_at')
    # Priorit√© 2: la licence a-t-elle expir√© ?
    if expires_at:
        # S'assure que la date est bien un objet datetime.
        if isinstance(expires_at, str):
            expires_at = datetime.datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
        
        # Compare avec la date/heure actuelle en UTC pour √©viter les erreurs de fuseau.
        if expires_at < datetime.datetime.now(datetime.timezone.utc):
            return "Expir√©e"

    # Priorit√© 3: la limite d'utilisation a-t-elle √©t√© atteinte ?
    if license_info.get('max_usage', -1) > 0 and license_info.get('usage_count', 0) >= license_info.get('max_usage', -1):
        return "Limite atteinte"
    
    # Si aucune des conditions ci-dessus n'est remplie, la licence est active.
    return "Active"

def days_until_expiration(license_info: Dict) -> int:
    """
    Calcule et retourne le nombre de jours restants avant l'expiration d'une licence.
    
    Args:
        license_info (dict): Le dictionnaire de la licence.
        
    Returns:
        int: Le nombre de jours restants. N√©gatif si la licence a d√©j√† expir√©.
    """
    expires_at = license_info['expires_at']
    
    # S'assure que 'expires_at' est un objet datetime pour le calcul.
    if isinstance(expires_at, str):
        expires_at = datetime.datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
    
    # Utilise une date/heure actuelle "aware" (avec fuseau UTC) pour une comparaison correcte.
    now_utc = datetime.datetime.now(datetime.timezone.utc)
    
    # Calcule la diff√©rence.
    delta = expires_at - now_utc
    return delta.days

# ============================================================================
# SCRIPT DE CONFIGURATION
# ============================================================================

def setup_supabase_config():
    """
    Affiche des instructions pour aider l'administrateur √† configurer Supabase.
    """
    print("üöÄ Aide √† la configuration Supabase pour le syst√®me de licences")
    print("\n1. Cr√©ez un projet Supabase sur https://supabase.com")
    print("2. Dans votre projet, allez dans Settings > API.")
    print("3. R√©cup√©rez votre 'Project URL' et votre cl√© 'anon' (public).")
    print("4. Cr√©ez un fichier .env √† la racine du projet et ajoutez ces lignes:")
    print("   SUPABASE_URL=VOTRE_URL_ICI")
    print("   SUPABASE_KEY=VOTRE_CLE_ANON_ICI")
    print("\n5. Allez dans l'√©diteur SQL ('SQL Editor') et ex√©cutez le script de cr√©ation de table (fourni par la fonction create_licenses_table()).")
    print("\n6. (IMPORTANT) Allez dans Authentication > Policies et cr√©ez une policy pour autoriser les mises √† jour (UPDATE) sur la table 'licenses', ou ex√©cutez le SQL suivant:")
    
    sql_policy_script = """
    -- Policy pour autoriser les mises √† jour sur la table 'licenses'
    -- Sans cela, les fonctions comme d√©sactiver, r√©activer, prolonger √©choueront.
    CREATE POLICY "Allow all updates for anon"
    ON public.licenses
    FOR UPDATE
    TO anon
    USING (true)
    WITH CHECK (true);
    """
    print(sql_policy_script) 