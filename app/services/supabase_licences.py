# Module de gestion des licences avec Supabase
# Ce fichier contient les fonctions n√©cessaires pour g√©rer les licences via Supabase

import hashlib
import datetime
import uuid
import json
import os
from typing import Optional, Dict, List, Tuple
import requests
from supabase import create_client, Client

# ============================================================================
# CONFIGURATION SUPABASE
# ============================================================================

# Configuration Supabase (√† remplacer par vos vraies valeurs)
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://your-project.supabase.co")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "your-anon-key")

# Cl√© secr√®te pour la g√©n√©ration des licences (√† changer en production)
SECRET_KEY = "connecteur-sages-v1-secret-key-2024"

# Dur√©e de validit√© par d√©faut des licences (en jours)
DEFAULT_LICENSE_DURATION = 365

# ============================================================================
# INITIALISATION SUPABASE
# ============================================================================

def get_supabase_client() -> Client:
    """
    Cr√©e et retourne un client Supabase.
    
    Returns:
        Client: Client Supabase configur√©
    """
    try:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        return supabase
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation du client Supabase: {e}")
        return None

# ============================================================================
# G√âN√âRATION ET VALIDATION DES LICENCES
# ============================================================================

def generate_license_key(client_name: str, client_email: str, duration_days: int = DEFAULT_LICENSE_DURATION) -> str:
    """
    G√©n√®re une cl√© de licence unique pour un client.
    
    Args:
        client_name (str): Nom du client
        client_email (str): Email du client
        duration_days (int): Dur√©e de validit√© en jours
        
    Returns:
        str: Cl√© de licence g√©n√©r√©e
    """
    # Cr√©er une cha√Æne unique bas√©e sur les informations du client
    unique_string = f"{client_name}:{client_email}:{duration_days}:{SECRET_KEY}"
    
    # G√©n√©rer un hash SHA-256
    hash_object = hashlib.sha256(unique_string.encode())
    hash_hex = hash_object.hexdigest()
    
    # Formater la cl√© en groupes de 4 caract√®res s√©par√©s par des tirets
    formatted_key = '-'.join([hash_hex[i:i+4] for i in range(0, 32, 4)])
    
    return formatted_key.upper()

def validate_license_key(license_key: str) -> bool:
    """
    Valide le format d'une cl√© de licence.
    
    Args:
        license_key (str): Cl√© de licence √† valider
        
    Returns:
        bool: True si le format est valide, False sinon
    """
    if not license_key:
        return False
    
    # Supprimer les tirets et v√©rifier la longueur
    clean_key = license_key.replace('-', '').replace(' ', '')
    if len(clean_key) != 32:
        return False
    
    # V√©rifier que tous les caract√®res sont hexad√©cimaux
    try:
        int(clean_key, 16)
        return True
    except ValueError:
        return False

# ============================================================================
# GESTION DE LA BASE DE DONN√âES SUPABASE
# ============================================================================

def create_licenses_table() -> bool:
    """
    Cr√©e la table licenses dans Supabase si elle n'existe pas.
    Note: Cette fonction n√©cessite des privil√®ges d'administrateur dans Supabase.
    
    Returns:
        bool: True si la table a √©t√© cr√©√©e avec succ√®s
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # SQL pour cr√©er la table (√† ex√©cuter dans l'interface SQL de Supabase)
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS licenses (
            id BIGSERIAL PRIMARY KEY,
            license_key VARCHAR(255) UNIQUE NOT NULL,
            client_name VARCHAR(255) NOT NULL,
            client_email VARCHAR(255) NOT NULL,
            company_name VARCHAR(255),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
            is_active BOOLEAN DEFAULT TRUE,
            last_used TIMESTAMP WITH TIME ZONE,
            usage_count INTEGER DEFAULT 0,
            max_usage INTEGER DEFAULT -1,
            notes TEXT
        );
        
        -- Cr√©er un index sur license_key pour les performances
        CREATE INDEX IF NOT EXISTS idx_licenses_license_key ON licenses(license_key);
        
        -- Cr√©er un index sur is_active pour les requ√™tes de validation
        CREATE INDEX IF NOT EXISTS idx_licenses_is_active ON licenses(is_active);
        """
        
        print("üìù Veuillez ex√©cuter le SQL suivant dans l'interface SQL de Supabase:")
        print(create_table_sql)
        print("‚úÖ Table licenses cr√©√©e avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la table licenses: {e}")
        return False

def add_license(client_name: str, client_email: str, company_name: str = None, 
                duration_days: int = DEFAULT_LICENSE_DURATION, max_usage: int = -1, notes: str = None) -> Optional[str]:
    """
    Ajoute une nouvelle licence dans Supabase.
    
    Args:
        client_name (str): Nom du client
        client_email (str): Email du client
        company_name (str): Nom de l'entreprise (optionnel)
        duration_days (int): Dur√©e de validit√© en jours
        max_usage (int): Nombre maximum d'utilisations (-1 pour illimit√©)
        notes (str): Notes additionnelles
        
    Returns:
        str: Cl√© de licence g√©n√©r√©e ou None en cas d'erreur
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return None
        
        # G√©n√©rer la cl√© de licence
        license_key = generate_license_key(client_name, client_email, duration_days)
        
        # Calculer la date d'expiration
        expires_at = datetime.datetime.now() + datetime.timedelta(days=duration_days)
        
        # Pr√©parer les donn√©es
        license_data = {
            'license_key': license_key,
            'client_name': client_name,
            'client_email': client_email,
            'company_name': company_name,
            'expires_at': expires_at.isoformat(),
            'max_usage': max_usage,
            'notes': notes
        }
        
        # Ins√©rer dans Supabase
        result = supabase.table('licenses').insert(license_data).execute()
        
        if result.data:
            print(f"‚úÖ Licence cr√©√©e avec succ√®s pour {client_name}")
            return license_key
        else:
            print("‚ùå Erreur lors de l'ajout de la licence")
            return None
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout de la licence: {e}")
        return None

def get_license_info(license_key: str) -> Optional[Dict]:
    """
    R√©cup√®re les informations d'une licence depuis Supabase.
    
    Args:
        license_key (str): Cl√© de licence
        
    Returns:
        dict: Informations de la licence ou None si non trouv√©e
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return None
        
        # Rechercher la licence
        result = supabase.table('licenses').select('*').eq('license_key', license_key).execute()
        
        if result.data and len(result.data) > 0:
            license_data = result.data[0]
            
            # Convertir les dates string en objets datetime
            if license_data.get('created_at'):
                license_data['created_at'] = datetime.datetime.fromisoformat(license_data['created_at'].replace('Z', '+00:00'))
            if license_data.get('expires_at'):
                license_data['expires_at'] = datetime.datetime.fromisoformat(license_data['expires_at'].replace('Z', '+00:00'))
            if license_data.get('last_used'):
                license_data['last_used'] = datetime.datetime.fromisoformat(license_data['last_used'].replace('Z', '+00:00'))
            
            return license_data
        
        return None
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la licence: {e}")
        return None

def validate_license(license_key: str) -> Tuple[bool, str]:
    """
    Valide une licence (v√©rifie l'existence, l'expiration, l'activation, etc.).
    
    Args:
        license_key (str): Cl√© de licence √† valider
        
    Returns:
        tuple: (is_valid, message) - Validit√© et message d'erreur si applicable
    """
    # V√©rifier le format de la cl√©
    if not validate_license_key(license_key):
        return False, "Format de cl√© de licence invalide"
    
    # R√©cup√©rer les informations de la licence
    license_info = get_license_info(license_key)
    if not license_info:
        return False, "Licence non trouv√©e"
    
    # V√©rifier si la licence est active
    if not license_info['is_active']:
        return False, "Licence d√©sactiv√©e"
    
    # V√©rifier l'expiration
    if license_info['expires_at'] < datetime.datetime.now():
        return False, "Licence expir√©e"
    
    # V√©rifier le nombre d'utilisations
    if license_info['max_usage'] > 0 and license_info['usage_count'] >= license_info['max_usage']:
        return False, "Limite d'utilisation atteinte"
    
    return True, "Licence valide"

def update_license_usage(license_key: str) -> bool:
    """
    Met √† jour les statistiques d'utilisation d'une licence dans Supabase.
    
    Args:
        license_key (str): Cl√© de licence
        
    Returns:
        bool: True si la mise √† jour a r√©ussi
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # Mettre √† jour l'utilisation
        result = supabase.table('licenses').update({
            'last_used': datetime.datetime.now().isoformat(),
            'usage_count': supabase.raw('usage_count + 1')
        }).eq('license_key', license_key).execute()
        
        return len(result.data) > 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour de l'utilisation: {e}")
        return False

def deactivate_license(license_key: str) -> bool:
    """
    D√©sactive une licence dans Supabase.
    
    Args:
        license_key (str): Cl√© de licence √† d√©sactiver
        
    Returns:
        bool: True si la d√©sactivation a r√©ussi
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return False
        
        # D√©sactiver la licence
        result = supabase.table('licenses').update({
            'is_active': False
        }).eq('license_key', license_key).execute()
        
        if len(result.data) > 0:
            print(f"‚úÖ Licence {license_key} d√©sactiv√©e")
            return True
        else:
            print(f"‚ùå Licence {license_key} non trouv√©e")
            return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©sactivation: {e}")
        return False

def get_all_licenses() -> List[Dict]:
    """
    R√©cup√®re toutes les licences depuis Supabase.
    
    Returns:
        list: Liste des licences
    """
    try:
        supabase = get_supabase_client()
        if not supabase:
            return []
        
        # R√©cup√©rer toutes les licences
        result = supabase.table('licenses').select('*').order('created_at', desc=True).execute()
        
        licenses = []
        for license_data in result.data:
            # Convertir les dates string en objets datetime
            if license_data.get('created_at'):
                license_data['created_at'] = datetime.datetime.fromisoformat(license_data['created_at'].replace('Z', '+00:00'))
            if license_data.get('expires_at'):
                license_data['expires_at'] = datetime.datetime.fromisoformat(license_data['expires_at'].replace('Z', '+00:00'))
            if license_data.get('last_used'):
                license_data['last_used'] = datetime.datetime.fromisoformat(license_data['last_used'].replace('Z', '+00:00'))
            
            licenses.append(license_data)
        
        return licenses
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des licences: {e}")
        return []

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

def format_license_key(license_key: str) -> str:
    """
    Formate une cl√© de licence pour l'affichage.
    
    Args:
        license_key (str): Cl√© de licence brute
        
    Returns:
        str: Cl√© format√©e
    """
    clean_key = license_key.replace('-', '').replace(' ', '')
    return '-'.join([clean_key[i:i+4] for i in range(0, 32, 4)]).upper()

def get_license_status_text(license_info: Dict) -> str:
    """
    Retourne le statut textuel d'une licence.
    
    Args:
        license_info (dict): Informations de la licence
        
    Returns:
        str: Statut textuel
    """
    if not license_info['is_active']:
        return "D√©sactiv√©e"
    
    if license_info['expires_at'] < datetime.datetime.now():
        return "Expir√©e"
    
    if license_info['max_usage'] > 0 and license_info['usage_count'] >= license_info['max_usage']:
        return "Limite atteinte"
    
    return "Active"

def days_until_expiration(license_info: Dict) -> int:
    """
    Calcule le nombre de jours avant expiration.
    
    Args:
        license_info (dict): Informations de la licence
        
    Returns:
        int: Nombre de jours avant expiration (n√©gatif si expir√©e)
    """
    delta = license_info['expires_at'] - datetime.datetime.now()
    return delta.days

# ============================================================================
# CONFIGURATION SUPABASE
# ============================================================================

def setup_supabase_config():
    """
    Aide √† configurer Supabase pour le syst√®me de licences.
    """
    print("üöÄ Configuration Supabase pour le syst√®me de licences")
    print("\n1. Cr√©ez un projet Supabase sur https://supabase.com")
    print("2. R√©cup√©rez votre URL et cl√© API dans Settings > API")
    print("3. Configurez les variables d'environnement:")
    print("   - SUPABASE_URL=https://your-project.supabase.co")
    print("   - SUPABASE_KEY=your-anon-key")
    print("\n4. Ex√©cutez le SQL suivant dans l'interface SQL de Supabase:")
    
    sql_script = """
    -- Cr√©er la table licenses
    CREATE TABLE IF NOT EXISTS licenses (
        id BIGSERIAL PRIMARY KEY,
        license_key VARCHAR(255) UNIQUE NOT NULL,
        client_name VARCHAR(255) NOT NULL,
        client_email VARCHAR(255) NOT NULL,
        company_name VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        last_used TIMESTAMP WITH TIME ZONE,
        usage_count INTEGER DEFAULT 0,
        max_usage INTEGER DEFAULT -1,
        notes TEXT
    );
    
    -- Cr√©er les index pour les performances
    CREATE INDEX IF NOT EXISTS idx_licenses_license_key ON licenses(license_key);
    CREATE INDEX IF NOT EXISTS idx_licenses_is_active ON licenses(is_active);
    CREATE INDEX IF NOT EXISTS idx_licenses_expires_at ON licenses(expires_at);
    
    -- Activer Row Level Security (RLS) pour la s√©curit√©
    ALTER TABLE licenses ENABLE ROW LEVEL SECURITY;
    
    -- Cr√©er une politique pour permettre la lecture publique (√† ajuster selon vos besoins)
    CREATE POLICY "Allow public read access" ON licenses
        FOR SELECT USING (true);
    
    -- Cr√©er une politique pour permettre l'insertion (√† ajuster selon vos besoins)
    CREATE POLICY "Allow public insert" ON licenses
        FOR INSERT WITH CHECK (true);
    
    -- Cr√©er une politique pour permettre la mise √† jour (√† ajuster selon vos besoins)
    CREATE POLICY "Allow public update" ON licenses
        FOR UPDATE USING (true);
    """
    
    print(sql_script)
    print("\n5. Testez la configuration avec la fonction de test") 