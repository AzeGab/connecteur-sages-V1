# app/services/batigest/heures.py
# Module de gestion du transfert des heures Batigest
# Ce fichier contient les fonctions n√©cessaires pour transf√©rer les heures
# entre BatiSimply, PostgreSQL et SQL Server

import psycopg2
from app.services.connex import connect_to_postgres, connect_to_sqlserver, load_credentials, recup_batisimply_token
import requests
import json
from datetime import datetime, timedelta
import pytz

# ============================================================================
# TRANSFERT BATISIMPLY VERS POSTGRESQL
# ============================================================================

def transfer_heures_to_postgres():
    """
    Transf√®re les heures depuis BatiSimply vers PostgreSQL.
    
    Cette fonction :
    1. R√©cup√®re le token d'authentification
    2. R√©cup√®re les heures depuis BatiSimply via l'API
    3. Les ins√®re dans PostgreSQL avec gestion des doublons
    4. G√®re la conversion de timezone et la normalisation des dates
    
    Returns:
        bool: True si le transfert a r√©ussi, False sinon
    """
    try:
        # R√©cup√©ration du token
        token = recup_batisimply_token()
        if not token:
            print("‚ùå Impossible de continuer sans token Batisimply")
            return False

        # Connexion √† PostgreSQL
        creds = load_credentials()
        if not creds or "postgres" not in creds:
            print("‚ùå Informations PostgreSQL manquantes")
            return False

        pg = creds["postgres"]
        postgres_conn = connect_to_postgres(
            pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
        )

        if not postgres_conn:
            print("‚ùå Connexion √† PostgreSQL √©chou√©e")
            return False

        # Configuration de l'API BatiSimply
        API_URL = "https://api.staging.batisimply.fr/api/timeSlotManagement/allUsers"
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }

        # Configuration de la fen√™tre de temps (par d√©faut 180 jours)
        timezone_name = creds.get("timezone", "Europe/Paris")
        days_back = creds.get("heures_days_back", 180)
        
        # Calcul des dates de d√©but et fin
        local_tz = pytz.timezone(timezone_name)
        now = datetime.now(local_tz)
        start_date = now - timedelta(days=days_back)
        
        # Conversion en UTC pour l'API
        start_utc = start_date.astimezone(pytz.UTC)
        end_utc = now.astimezone(pytz.UTC)
        
        print(f"üìÖ R√©cup√©ration des heures des {days_back} derniers jours")
        print(f"üìÖ P√©riode : {start_date.strftime('%Y-%m-%d')} √† {now.strftime('%Y-%m-%d')} ({timezone_name})")

        # R√©cup√©ration des heures depuis BatiSimply
        response = requests.get(API_URL, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Erreur API BatiSimply : {response.status_code}")
            return False

        heures_data = response.json()
        heures_count = 0
        heures_updated = 0

        postgres_cursor = postgres_conn.cursor()

        # Traitement de chaque heure
        for heure in heures_data:
            try:
                # Conversion des dates UTC vers le timezone local
                date_debut_utc = datetime.fromisoformat(heure['dateStart'].replace('Z', '+00:00'))
                date_fin_utc = datetime.fromisoformat(heure['dateEnd'].replace('Z', '+00:00'))
                
                # Conversion vers le timezone local
                date_debut_local = date_debut_utc.astimezone(local_tz)
                date_fin_local = date_fin_utc.astimezone(local_tz)
                
                # Normalisation √† la minute (suppression des secondes)
                date_debut_normalized = date_debut_local.replace(second=0, microsecond=0)
                date_fin_normalized = date_fin_local.replace(second=0, microsecond=0)
                
                # V√©rification si l'heure est dans la fen√™tre de temps
                if date_debut_normalized < start_date or date_debut_normalized > now:
                    continue

                # Calcul du total d'heures
                duree = date_fin_normalized - date_debut_normalized
                total_heures = duree.total_seconds() / 3600

                # Insertion avec UPSERT (ON CONFLICT DO UPDATE)
                postgres_cursor.execute("""
                    INSERT INTO batigest_heures 
                    (id_heure, date_debut, date_fin, id_utilisateur, id_projet, 
                     status_management, total_heure, panier, trajet, code_projet, sync)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (id_heure) DO UPDATE SET 
                    date_debut = EXCLUDED.date_debut,
                    date_fin = EXCLUDED.date_fin,
                    id_utilisateur = EXCLUDED.id_utilisateur,
                    id_projet = EXCLUDED.id_projet,
                    status_management = EXCLUDED.status_management,
                    total_heure = EXCLUDED.total_heure,
                    panier = EXCLUDED.panier,
                    trajet = EXCLUDED.trajet,
                    code_projet = EXCLUDED.code_projet,
                    sync = FALSE
                """, (
                    heure['id'],
                    date_debut_normalized,
                    date_fin_normalized,
                    heure['userId'],
                    heure['projectId'],
                    heure.get('statusManagement', ''),
                    total_heures,
                    heure.get('basket', False),
                    heure.get('travel', False),
                    None,  # code_projet sera mis √† jour plus tard
                    False
                ))
                
                heures_count += 1
                
                # V√©rifier si c'√©tait une mise √† jour
                if postgres_cursor.rowcount == 0:
                    heures_updated += 1

            except Exception as e:
                print(f"‚ùå Erreur lors du traitement de l'heure {heure.get('id')} : {e}")
                continue

        # Validation des modifications
        postgres_conn.commit()
        postgres_cursor.close()
        postgres_conn.close()

        print(f"‚úÖ {heures_count} heure(s) trait√©es ({heures_updated} mises √† jour)")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du transfert vers PostgreSQL : {e}")
        return False

# ============================================================================
# TRANSFERT POSTGRESQL VERS SQL SERVER
# ============================================================================

def transfer_heures_to_sqlserver():
    """
    Transf√®re les heures depuis PostgreSQL vers SQL Server.
    
    Cette fonction :
    1. R√©cup√®re les heures non synchronis√©es depuis PostgreSQL
    2. V√©rifie les correspondances avec les salari√©s dans SQL Server
    3. Ins√®re ou met √† jour les heures dans SQL Server
    4. Met √† jour le statut de synchronisation
    
    Returns:
        int: Nombre d'heures transf√©r√©es avec succ√®s
    """
    try:
        # Connexions aux bases de donn√©es
        creds = load_credentials()
        if not creds or "postgres" not in creds or "sqlserver" not in creds:
            print("‚ùå Informations de connexion manquantes")
            return 0

        postgres_conn = connect_to_postgres(
            creds["postgres"]["host"],
            creds["postgres"]["user"],
            creds["postgres"]["password"],
            creds["postgres"]["database"],
            creds["postgres"].get("port", "5432")
        )

        sqlserver_conn = connect_to_sqlserver(
            creds["sqlserver"]["host"],
            creds["sqlserver"]["user"],
            creds["sqlserver"]["password"],
            creds["sqlserver"]["database"],
            creds["sqlserver"].get("port", "1433")
        )

        if not postgres_conn or not sqlserver_conn:
            print("‚ùå Connexion aux bases √©chou√©e")
            return 0

        postgres_cursor = postgres_conn.cursor()
        sqlserver_cursor = sqlserver_conn.cursor()

        # R√©cup√©ration des heures non synchronis√©es avec code_projet
        postgres_cursor.execute("""
            SELECT id_heure, date_debut, date_fin, id_utilisateur, id_projet, 
                   status_management, total_heure, panier, trajet, code_projet
            FROM batigest_heures 
            WHERE sync = FALSE AND code_projet IS NOT NULL
        """)

        heures = postgres_cursor.fetchall()
        print(f"üì¶ {len(heures)} heure(s) √† traiter...")

        # V√©rification de la structure de la table Salarie
        sqlserver_cursor.execute("""
            SELECT COLUMN_NAME, DATA_TYPE 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = 'Salarie'
        """)
        salarie_columns = sqlserver_cursor.fetchall()
        print("üìã Structure de la table Salarie :")
        for col in salarie_columns:
            print(f"  - {col[0]}: {col[1]}")

        heures_transferees = 0

        # Traitement de chaque heure
        for heure in heures:
            try:
                id_heure, date_debut, date_fin, id_utilisateur, id_projet, status_management, total_heure, panier, trajet, code_projet = heure

                # Recherche du salari√© correspondant
                sqlserver_cursor.execute("""
                    SELECT Code FROM Salarie WHERE codebs = ?
                """, (str(id_utilisateur),))

                salarie_result = sqlserver_cursor.fetchone()
                if not salarie_result:
                    print(f"‚ö†Ô∏è Aucun utilisateur trouv√© avec l'ID {id_utilisateur}")
                    continue

                code_salarie = salarie_result[0]
                date_heure = date_debut.date()

                # V√©rification si l'enregistrement existe d√©j√†
                sqlserver_cursor.execute("""
                    SELECT CodeChantier, CodeSalarie, Date, Heures, Commentaire
                    FROM SuiviMO 
                    WHERE CodeChantier = ? AND CodeSalarie = ? AND Date = ?
                """, (code_projet, code_salarie, date_heure))

                existing_record = sqlserver_cursor.fetchone()

                if existing_record:
                    # Mise √† jour si les valeurs diff√®rent
                    existing_heures, existing_commentaire = existing_record[3], existing_record[4]
                    if existing_heures != total_heure or existing_commentaire != status_management:
                        sqlserver_cursor.execute("""
                            UPDATE SuiviMO 
                            SET Heures = ?, Commentaire = ?
                            WHERE CodeChantier = ? AND CodeSalarie = ? AND Date = ?
                        """, (total_heure, status_management, code_projet, code_salarie, date_heure))
                        print(f"üîÑ Mise √† jour heure {id_heure} : {code_projet}/{code_salarie}/{date_heure}")
                    else:
                        print(f"‚è≠Ô∏è Heure {id_heure} inchang√©e : {code_projet}/{code_salarie}/{date_heure}")
                else:
                    # Insertion d'un nouvel enregistrement
                    sqlserver_cursor.execute("""
                        INSERT INTO SuiviMO 
                        (CodeChantier, CodeSalarie, Date, Heures, Commentaire)
                        VALUES (?, ?, ?, ?, ?)
                    """, (code_projet, code_salarie, date_heure, total_heure, status_management))
                    print(f"‚ûï Nouvelle heure {id_heure} : {code_projet}/{code_salarie}/{date_heure}")

                # Mise √† jour du statut de synchronisation
                postgres_cursor.execute("""
                    UPDATE batigest_heures SET sync = TRUE WHERE id_heure = ?
                """, (id_heure,))

                heures_transferees += 1

            except Exception as e:
                print(f"‚ùå Erreur lors du traitement de l'heure {id_heure} : {e}")
                continue

        # Validation des modifications
        postgres_conn.commit()
        sqlserver_conn.commit()

        # Fermeture des connexions
        postgres_cursor.close()
        sqlserver_cursor.close()
        postgres_conn.close()
        sqlserver_conn.close()

        print(f"‚úÖ {heures_transferees} heure(s) transf√©r√©e(s) avec succ√®s")
        return heures_transferees

    except Exception as e:
        print(f"‚ùå Erreur lors du transfert vers SQL Server : {e}")
        return 0
