# app/services/batigest/sync.py
# Module de synchronisation compl√®te Batigest
# Ce fichier contient les fonctions de synchronisation compl√®te
# entre Batigest, PostgreSQL et BatiSimply

from .chantiers import transfer_chantiers, transfer_chantiers_vers_batisimply, update_code_projet_chantiers
from .heures import transfer_heures_to_postgres, transfer_heures_to_sqlserver
from .devis import transfer_devis, transfer_devis_vers_batisimply
from app.services.connex import recup_batisimply_token, connexion

# ============================================================================
# SYNCHRONISATION DE BATIGEST VERS BATISIMPLY
# ============================================================================

def sync_batigest_to_batisimply():
    """
    Synchronise les donn√©es de Batigest vers Batisimply via PostgreSQL.
    - √âtape 1 : R√©cup√®re les donn√©es depuis Batigest (SQL Server) vers PostgreSQL.
    - √âtape 2 : Transf√®re les heures de Batigest vers PostgreSQL.
    - √âtape 3 : Transf√®re les chantiers depuis PostgreSQL vers BatiSimply.
    
    Returns:
        tuple: (bool, str)
    """
    try:
        print("\n=== D√âBUT DE LA SYNCHRONISATION BATIGEST ‚Üí BATISIMPLY ===")

        # 1. R√©cup√©ration des credentials et du mode
        from app.services.connex import load_credentials
        creds = load_credentials()
        if not creds:
            return False, "‚ùå Impossible de charger les credentials."

        mode = creds.get("mode", "chantier")
        print(f"\nüîÅ Mode de synchronisation : {mode}")

        # 2. Transfert des donn√©es Batigest ‚Üí PostgreSQL
        print("\nüîÑ Transfert des donn√©es Batigest vers PostgreSQL...")
        if mode == "devis":
            success, message = transfer_devis()
        else:
            success, message = transfer_chantiers()

        if not success:
            return False, f"‚ùå √âchec du transfert SQL Server ‚Üí PostgreSQL : {message}"
        print(f"‚úÖ {message}")

        # 3. Transfert des donn√©es PostgreSQL ‚Üí BatiSimply
        print("\nüîÑ Transfert des donn√©es PostgreSQL ‚Üí Batisimply...")
        if mode == "devis":
            success = transfer_devis_vers_batisimply()
        else:
            success = transfer_chantiers_vers_batisimply()

        if not success:
            return False, "‚ùå √âchec du transfert PostgreSQL ‚Üí BatiSimply"
        print("‚úÖ Transfert vers BatiSimply termin√© avec succ√®s")

        print("\n=== SYNCHRONISATION TERMIN√âE AVEC SUCC√àS ===")
        return True, "‚úÖ Synchronisation compl√®te Batigest ‚Üí Batisimply r√©ussie."

    except Exception as e:
        print(f"\n‚ùå Erreur inattendue : {e}")
        return False, f"‚ùå Erreur lors de la synchronisation : {e}"

# ============================================================================
# SYNCHRONISATION DE BATISIMPLY VERS BATIGEST
# ============================================================================

def sync_batisimply_to_batigest():
    """
    Synchronise les heures de Batisimply vers Batigest via PostgreSQL.
    
    Flux : Batisimply ‚Üí PostgreSQL ‚Üí Batigest (SQL Server)
    
    Returns:
        tuple: (bool, str)
            - bool: True si la synchronisation a r√©ussi, False sinon
            - str: Message d√©crivant le r√©sultat de l'op√©ration
    """
    try:
        print("\n=== D√âBUT DE LA SYNCHRONISATION BATISIMPLY ‚Üí BATIGEST ===")
        
        # R√©cup√©ration du token Batisimply
        token = recup_batisimply_token()
        if not token:
            return False, "‚ùå Impossible de continuer sans token Batisimply"

        # Configuration de l'API BatiSimply
        API_URL = "https://api.staging.batisimply.fr/api/project"
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }

        postgres_conn, sqlserver_conn = connexion()

        print("‚úÖ Connexions aux bases de donn√©es √©tablies")

        # 1. Synchronisation Batisimply ‚Üí PostgreSQL
        print("\nüîÑ Synchronisation Batisimply ‚Üí PostgreSQL")
        
        # R√©cup√©ration des heures depuis Batisimply et envoi vers PostgreSQL
        transfer_heures_to_postgres()
        update_code_projet_chantiers()
        
        # 2. Synchronisation PostgreSQL ‚Üí Batigest
        heures_transferees = transfer_heures_to_sqlserver()

        # Fermeture des connexions
        postgres_conn.close()
        sqlserver_conn.close()

        print(f"\n‚úÖ {heures_transferees} heure(s) synchronis√©e(s)")
        print("\n=== FIN DE LA SYNCHRONISATION BATISIMPLY ‚Üí BATIGEST ===")
        return True, f"‚úÖ Synchronisation compl√®te Batisimply ‚Üí Batigest r√©ussie. {heures_transferees} heure(s) transf√©r√©e(s)."

    except Exception as e:
        print(f"\n‚ùå Erreur lors de la synchronisation : {e}")
        return False, f"‚ùå Erreur lors de la synchronisation : {e}"
