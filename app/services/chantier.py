# app/services/chantier_service.py
# Module de gestion du transfert des chantiers
# Ce fichier contient les fonctions n√©cessaires pour transf√©rer les donn√©es
# des chantiers depuis SQL Server vers PostgreSQL

import psycopg2
from app.services.connex import connect_to_sqlserver, connect_to_postgres, load_credentials, recup_batisimply_token
import requests
import json
from datetime import date

# ============================================================================
# TRANSFERT VERS POSTGRESQL
# ============================================================================

def transfer_chantiers():
    """
    Transf√®re les donn√©es des chantiers depuis SQL Server vers PostgreSQL.
    
    Cette fonction :
    1. V√©rifie les identifiants de connexion
    2. √âtablit les connexions aux deux bases de donn√©es
    3. R√©cup√®re les chantiers depuis SQL Server
    4. Les ins√®re dans PostgreSQL en ignorant les doublons
    5. Ferme proprement les connexions
    
    Returns:
        tuple: (bool, str)
            - bool: True si le transfert a r√©ussi, False sinon
            - str: Message d√©crivant le r√©sultat de l'op√©ration
    """
    try:
        # V√©rification des identifiants
        creds = load_credentials()
        if not creds or "sqlserver" not in creds or "postgres" not in creds:
            return False, "‚ùå Informations de connexion manquantes"

        sql = creds["sqlserver"]
        pg = creds["postgres"]

        # √âtablissement des connexions
        sqlserver_conn = connect_to_sqlserver(
            sql["server"], sql["user"], sql["password"], sql["database"]
        )
        postgres_conn = connect_to_postgres(
            pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
        )

        if not sqlserver_conn or not postgres_conn:
            return False, "‚ùå Connexion aux bases √©chou√©e"

        # Cr√©ation des curseurs pour l'ex√©cution des requ√™tes
        sqlserver_cursor = sqlserver_conn.cursor()
        postgres_cursor = postgres_conn.cursor()

        # R√©cup√©ration des chantiers depuis SQL Server
        sqlserver_cursor.execute("""
            SELECT ChantierDef.Code, DateDebut, DateFin, NomClient, Libelle, AdrChantier, CPChantier, VilleChantier, SUM(TempsMO) AS "TotalMo"
            FROM dbo.ChantierDef
            JOIN Devis ON devis.CodeClient = ChantierDef.CodeClient
            WHERE Devis.Etat = 3
            GROUP BY chantierDef.Code, DateDebut, DateFin, NomClient, Libelle, AdrChantier, CPChantier, VilleChantier
        """)
        rows = sqlserver_cursor.fetchall()

        # Insertion des chantiers dans PostgreSQL
        for row in rows:
            code, date_debut, date_fin, nom_client, description, adr_chantier, cp_chantier, ville_chantier, TotalMo = row
            # Utilisation de ON CONFLICT pour √©viter les doublons
            postgres_cursor.execute(
                """
                INSERT INTO batigest_chantiers 
                (code, date_debut, date_fin, nom_client, description, adr_chantier, cp_chantier, ville_chantier, total_mo)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (code) DO UPDATE SET 
                date_debut = EXCLUDED.date_debut,
                date_fin = EXCLUDED.date_fin,
                nom_client = EXCLUDED.nom_client,
                description = EXCLUDED.description,
                adr_chantier = EXCLUDED.adr_chantier,
                cp_chantier = EXCLUDED.cp_chantier,
                ville_chantier = EXCLUDED.ville_chantier,
                total_mo = EXCLUDED.total_mo,
                sync = EXCLUDED.sync = False
                """,
                (code, date_debut, date_fin, nom_client, description, adr_chantier, cp_chantier, ville_chantier, TotalMo)
            )

        # Validation des modifications dans PostgreSQL
        postgres_conn.commit()

        # Fermeture propre des connexions
        sqlserver_cursor.close()
        postgres_cursor.close()
        sqlserver_conn.close()
        postgres_conn.close()

        return True, "‚úÖ Transfert termin√© avec succ√®s"

    except Exception as e:
        # En cas d'erreur, on retourne le message d'erreur
        return False, f"‚ùå Erreur lors du transfert : {e}"

# ============================================================================
# TRANSFERT VERS BATISIMPLY
# ============================================================================

def transfer_chantiers_vers_batisimply():
    """
    Transf√®re les chantiers depuis PostgreSQL vers BatiSimply.
    
    Cette fonction :
    1. R√©cup√®re le token d'authentification
    2. V√©rifie les identifiants PostgreSQL
    3. R√©cup√®re les chantiers non synchronis√©s
    4. Les envoie √† l'API BatiSimply (POST pour nouveaux, PUT pour existants)
    5. Met √† jour le statut de synchronisation
    
    Returns:
        bool: True si au moins un chantier a √©t√© transf√©r√© avec succ√®s, False sinon
    """
    # R√©cup√©ration du token
    token = recup_batisimply_token()
    if not token:
        print("Impossible de continuer sans token.")
        return False

    # V√©rification des identifiants PostgreSQL
    creds = load_credentials()
    if not creds or "postgres" not in creds:
        print("‚ùå Informations Postgres manquantes.")
        return False

    # Connexion √† PostgreSQL
    pg = creds["postgres"]
    postgres_conn = connect_to_postgres(
        pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
    )

    if not postgres_conn:
        print("‚ùå Connexion √† la base Postgres √©chou√©e.")
        return False

    # Configuration de l'API BatiSimply
    API_URL = "https://api.staging.batisimply.fr/api/project"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    # R√©cup√©ration des chantiers non synchronis√©s
    postgres_cursor = postgres_conn.cursor()
    postgres_cursor.execute("""
        SELECT code, date_debut, date_fin, nom_client, description, adr_chantier, cp_chantier, ville_chantier, total_mo
        FROM batigest_chantiers
        WHERE sync = false
    """)

    rows = postgres_cursor.fetchall()
    success = False

    # R√©cup√©ration des chantiers existants dans BatiSimply
    existing_projects = {}
    response = requests.get(API_URL, headers=headers)
    if response.status_code == 200:
        projects = response.json().get("elements", [])
        for project in projects:
            existing_projects[project.get('projectCode')] = project.get('id')

    # Traitement de chaque chantier
    for row in rows:
        code, date_debut, date_fin, nom_client, description, adr, cp, ville, total_mo = row

        # Pr√©paration des donn√©es pour l'API
        data = {
            "address": {
                "city": ville,
                "countryCode": "FR",
                "geoPoint": {
                    "xLon": 3.8777,
                    "yLat": 43.6119
                },
                "googleFormattedAddress": f"{adr}, {cp} {ville}, France",
                "postalCode": cp,
                "street": adr
            },
            "budget": {
                "amount": 500000.0,
                "currency": "EUR"
            },
            "endEstimated": date_fin.strftime("%Y-%m-%d") if date_fin else None,
            "headQuarter": {
                "id": 33
            },
            "hoursSold": total_mo,
            "projectCode": code,
            "comment": description,
            "projectName": nom_client,
            "customerName": nom_client,
            "projectManager": "DEFINIR",
            "startEstimated": date_debut.strftime("%Y-%m-%d") if date_debut else None,
            "isArchived": False,
            "isFinished": False,
            "projectColor": "#9b1ff1"
        }

        # D√©termination de la m√©thode HTTP
        if code in existing_projects:
            project_id = existing_projects[code]
            method = "PUT"
            url = API_URL
            # Inclure l'id dans le payload pour la mise √† jour
            data["id"] = project_id
            print(f"üîÑ Mise √† jour du projet existant '{code}' (ID: {data['id']})")
        else:
            method = "POST"
            url = API_URL
            print(f"‚ûï Cr√©ation du nouveau projet '{code}'")

        # Envoi √† l'API et mise √† jour du statut
        response = requests.request(method, url, headers=headers, data=json.dumps(data))
        if response.status_code in [200, 201]:
            print(f"‚úÖ Projet '{code}' trait√© avec succ√®s")
            postgres_cursor.execute(
                "UPDATE batigest_chantiers SET sync = true, sync_date = NOW() WHERE code = %s", (code,))
            postgres_conn.commit()
            success = True
        else:
            print(f"‚ùå Erreur pour le projet '{code}' : {response.status_code} ‚Üí {response.text}")

    # Nettoyage
    postgres_cursor.close()
    postgres_conn.close()

    return success

# ============================================================================
# R√©cup√©ration des chantiers depuis Batisimply
# ============================================================================

def recup_chantiers_batisimply():
    """
    R√©cup√®re les chantiers depuis BatiSimply.
    
    Cette fonction :
    1. R√©cup√®re le token d'authentification
    2. R√©cup√®re les chantiers depuis BatiSimply via l'API
    3. Stocke les donn√©es dans une variable
    4. Retourne la variable
    """
    # R√©cup√©ration du token
    token = recup_batisimply_token()
    if not token:
        print("Impossible de continuer sans token.")
        return False

    # Configuration de l'API BatiSimply
    API_URL = "https://api.staging.batisimply.fr/api/project"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    # R√©cup√©ration des chantiers depuis BatiSimply
    response = requests.get(API_URL, headers=headers)
    if response.status_code == 200:
        chantiers_json = response.json()
        chantiers = chantiers_json.get("elements", [])
        return chantiers
    else:
        print(f"‚ùå Erreur pour la r√©cup√©ration des chantiers : {response.status_code} ‚Üí {response.text}")
        return False
    
# ============================================================================
# R√©cup√©ration des chantiers depuis Batigest
# ============================================================================

def recup_chantiers_postgres():
    """
    R√©cup√®re les chantiers depuis Batigest.
    
    Cette fonction :
    1. R√©cup√®re les chantiers de Batigest depuis PostgreSQL
    2. Stocke les donn√©es dans une variable
    3. Retourne la variable
    """
    # Connexions √† PostgreSQL
    creds = load_credentials()
    pg = creds["postgres"]
    postgres_conn = connect_to_postgres(
        pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
    )
    if not postgres_conn:
        print("‚ùå Connexion √† la base PostgreSQL √©chou√©e.")
        return False
    
    # R√©cup√©ration des chantiers de Batigest depuis PostgreSQL
    postgres_cursor = postgres_conn.cursor()
    postgres_cursor.execute("SELECT code FROM batigest_chantiers")
    chantiers_batigest = postgres_cursor.fetchall()
    postgres_cursor.close()
    postgres_conn.close()
    return chantiers_batigest

# ============================================================================
# R√©cup√©ration du code projet des chantiers
# ============================================================================

def recup_code_projet_chantiers():
    """
    R√©cup√®re les codes projet des chantiers en commun entre Batisimply et Batigest.
    
    Cette fonction :
    1. R√©cup√®re les chantiers depuis Batisimply
    2. R√©cup√®re les chantiers depuis Batigest
    3. Compare les codes des chantiers
    4. Retourne les codes en commun
    """
    # R√©cup√©ration des chantiers depuis Batisimply
    chantiers_batisimply = recup_chantiers_batisimply()
    if not chantiers_batisimply:
        print("‚ùå Impossible de r√©cup√©rer les chantiers depuis BatiSimply")
        return []

    # R√©cup√©ration des chantiers depuis Batigest
    chantiers_batigest = recup_chantiers_postgres()
    if not chantiers_batigest:
        print("‚ùå Impossible de r√©cup√©rer les chantiers depuis Batigest")
        return []

    # Comparaison des codes des chantiers
    codes_projet_communs = []
    for chantier in chantiers_batisimply:
        try:
            code = chantier.get('projectCode')
            id_projet = chantier.get('id')
            if code and id_projet and code in [c[0] for c in chantiers_batigest]:
                codes_projet_communs.append({
                    'code': code,
                    'id_projet': id_projet
                })
        except Exception as e:
            print(f"‚ùå Erreur lors du traitement du chantier : {e}")
            continue

    print(f"‚úÖ {len(codes_projet_communs)} codes projet trouv√©s")
    return codes_projet_communs

# ============================================================================
# V√©rification du contenu de la table batigest_heures
# ============================================================================

def check_batigest_heures_content():
    """
    V√©rifie le contenu de la table batigest_heures pour d√©boguer.
    Cette fonction :
    1. V√©rifie le contenu de la table batigest_heures
    2. Affiche le contenu de la table
    3. Ferme la connexion √† PostgreSQL
    """

    print("\n=== V√âRIFICATION DU CONTENU DE LA TABLE BATIGEST_HEURES ===")
    
    # Connexion PostgreSQL
    creds = load_credentials()
    if not creds or "postgres" not in creds:
        print("‚ùå Informations Postgres manquantes.")
        return False

    pg = creds["postgres"]
    postgres_conn = connect_to_postgres(
        pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
    )
    if not postgres_conn:
        print("‚ùå Connexion √† PostgreSQL √©chou√©e.")
        return False

    postgres_cursor = postgres_conn.cursor()

    # V√©rification des enregistrements
    postgres_cursor.execute("""
        SELECT code_projet, COUNT(*) as count 
        FROM batigest_heures 
        WHERE code_projet IS NOT NULL 
        GROUP BY code_projet
    """)
    
    results = postgres_cursor.fetchall()
    print("\nüìä Contenu de la table batigest_heures :")
    if results:
        for code, count in results:
            print(f"  - Code: {code}, Nombre d'enregistrements: {count}")
    else:
        print("  ‚ö†Ô∏è Aucun enregistrement trouv√© avec un code_projet non NULL")

    # Fermeture propre
    postgres_cursor.close()
    postgres_conn.close()
    
    print("=== FIN DE LA V√âRIFICATION ===")
    return True

# ============================================================================
# Mise √† jour des codes projet des chantiers
# ============================================================================

def update_code_projet_chantiers():
    """
    Met √† jour les codes projet des chantiers dans PostgreSQL.

    Cette fonction :
    1. R√©cup√®re les correspondances code ‚Üî id_projet entre Batisimply et Batigest
    2. Met √† jour la table `batigest_heures` en ins√©rant le `code_projet` pour chaque `code`
    3. Ferme la connexion √† PostgreSQL
    4. Affiche le nombre de mises √† jour effectu√©es
    5. Affiche le d√©tail des mises √† jour effectu√©es
    6. Affiche un message de succ√®s si les mises √† jour ont √©t√© effectu√©es
    7. Affiche un message d'erreur si aucune mise √† jour n'a √©t√© effectu√©e
    """
    print("=== D√âBUT DE LA MISE √Ä JOUR DES CODES PROJET ===")
    
    # V√©rification du contenu actuel
    check_batigest_heures_content()
    
    # R√©cup√©ration des correspondances depuis les deux syst√®mes
    codes_projet_communs = recup_code_projet_chantiers()
    print(f"‚úÖ {len(codes_projet_communs)} codes projet trouv√©s")
    
    if not codes_projet_communs:
        print("‚ùå Aucun code projet trouv√©")
        return False

    print("\nüìä Nombre de correspondances trouv√©es :", len(codes_projet_communs))
    print("D√©tail des correspondances :")
    for code_projet in codes_projet_communs:
        print(f"  - Code: {code_projet['code']}, ID Projet: {code_projet['id_projet']}")

    # Connexion PostgreSQL
    creds = load_credentials()
    if not creds or "postgres" not in creds:
        print("‚ùå Informations Postgres manquantes.")
        return False

    pg = creds["postgres"]
    postgres_conn = connect_to_postgres(
        pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
    )
    if not postgres_conn:
        print("‚ùå Connexion √† PostgreSQL √©chou√©e.")
        return False

    print("‚úÖ Connexion PostgreSQL r√©ussie")
    postgres_cursor = postgres_conn.cursor()

    # V√©rification de la structure de la table
    postgres_cursor.execute("""
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'batigest_heures'
    """)
    columns = postgres_cursor.fetchall()
    print("\nüìã V√©rification de la structure de la table :")
    for col in columns:
        print(f"  - {col[0]}: {col[1]}")

    print("\nüîÑ D√©but des mises √† jour :")
    updates_count = 0

    # Mise √† jour ligne par ligne
    for code_projet in codes_projet_communs:
        try:
            code = code_projet.get('code')
            id_projet = code_projet.get('id_projet')
            if code is None or id_projet is None:
                raise ValueError(f"Donn√©es manquantes : {code_projet}")

            print(f"\nüîç Traitement du code : {code} -> id_projet : {id_projet}")
            
            # Mise √† jour sans condition
            postgres_cursor.execute(
                "UPDATE batigest_heures SET code_projet = %s WHERE id_projet = %s",
                (str(code), id_projet)
            )
            
            # V√©rification apr√®s mise √† jour
            postgres_cursor.execute(
                "SELECT COUNT(*) FROM batigest_heures WHERE code_projet = %s",
                (str(code),)
            )
            updated_count = postgres_cursor.fetchone()[0]
            print(f"  ‚úÖ Mise √† jour effectu√©e : {updated_count} enregistrements modifi√©s")
            
            updates_count += updated_count

        except Exception as e:
            print(f"‚ùå Erreur pour le code projet {code_projet} : {e}")

    # Commit final
    postgres_conn.commit()
    print(f"\nüìä Total des mises √† jour effectu√©es : {updates_count}")

    # Fermeture propre
    postgres_cursor.close()
    postgres_conn.close()

    if updates_count == 0:
        print("\n‚ö†Ô∏è Aucune mise √† jour n'a √©t√© effectu√©e.")
    else:
        print("\n‚úÖ Mise √† jour des codes projet termin√©e avec succ√®s.")
    
    print("=== FIN DE LA MISE √Ä JOUR DES CODES PROJET ===")
    return True

# ============================================================================
# SYNCHRONISATION DE BATIGEST VERS BATISIMPLY
# ============================================================================

def sync_batigest_to_batisimply():
    """
    Synchronise les chantiers de Batigest vers Batisimply via PostgreSQL.
    
    Flux : Batigest (SQL Server) ‚Üí PostgreSQL ‚Üí Batisimply
    
    Returns:
        tuple: (bool, str)
            - bool: True si la synchronisation a r√©ussi, False sinon
            - str: Message d√©crivant le r√©sultat de l'op√©ration
    """
    try:
        print("\n=== D√âBUT DE LA SYNCHRONISATION BATIGEST ‚Üí BATISIMPLY ===")
        
        # R√©cup√©ration du token Batisimply
        token = recup_batisimply_token()
        if not token:
            return False, "‚ùå Impossible de continuer sans token Batisimply"

        # Configuration de l'API BatiSimply
        API_URL = "https://api.staging.batisimply.fr/api/project"
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }

        # Connexion aux bases de donn√©es
        creds = load_credentials()
        if not creds or "postgres" not in creds or "sqlserver" not in creds:
            return False, "‚ùå Informations de connexion manquantes"

        pg = creds["postgres"]
        sql = creds["sqlserver"]

        postgres_conn = connect_to_postgres(
            pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
        )
        sqlserver_conn = connect_to_sqlserver(
            sql["server"], sql["user"], sql["password"], sql["database"]
        )

        if not postgres_conn or not sqlserver_conn:
            return False, "‚ùå Connexion aux bases de donn√©es √©chou√©e"

        print("‚úÖ Connexions aux bases de donn√©es √©tablies")

        # 1. Synchronisation Batigest ‚Üí PostgreSQL
        print("\nüîÑ Synchronisation Batigest ‚Üí PostgreSQL")
        sqlserver_cursor = sqlserver_conn.cursor()
        postgres_cursor = postgres_conn.cursor()

        # R√©cup√©ration des chantiers actifs depuis Batigest
        sqlserver_cursor.execute("""
            SELECT 
                Code,
                DateDebut,
                DateFin,
                NomClient,
                Libelle,
                AdrChantier,
                CPChantier,
                VilleChantier
            FROM dbo.ChantierDef
            WHERE DateFin IS NULL OR DateFin > GETDATE()
        """)
        
        batigest_chantiers = sqlserver_cursor.fetchall()
        print(f"üìä {len(batigest_chantiers)} chantiers r√©cup√©r√©s depuis Batigest")

        # Mise √† jour de PostgreSQL avec les donn√©es de Batigest
        updated_batigest = 0
        for chantier in batigest_chantiers:
            try:
                code, date_debut, date_fin, nom_client, description, adr, cp, ville = chantier
                
                # Mise √† jour dans PostgreSQL
                postgres_cursor.execute("""
                    INSERT INTO batigest_chantiers 
                    (code, date_debut, date_fin, nom_client, description, adr_chantier, 
                     cp_chantier, ville_chantier, last_modified_batigest)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, NOW())
                    ON CONFLICT (code) DO UPDATE SET 
                    date_debut = EXCLUDED.date_debut,
                    date_fin = EXCLUDED.date_fin,
                    nom_client = EXCLUDED.nom_client,
                    description = EXCLUDED.description,
                    adr_chantier = EXCLUDED.adr_chantier,
                    cp_chantier = EXCLUDED.cp_chantier,
                    ville_chantier = EXCLUDED.ville_chantier,
                    last_modified_batigest = NOW()
                """, (code, date_debut, date_fin, nom_client, description, adr, cp, ville))
                updated_batigest += 1
                print(f"‚úÖ Chantier {code} mis √† jour dans PostgreSQL")
            except Exception as e:
                print(f"‚ùå Erreur lors de la mise √† jour du chantier {code} dans PostgreSQL : {e}")

        # 2. Synchronisation PostgreSQL ‚Üí Batisimply
        print("\nüîÑ Synchronisation PostgreSQL ‚Üí Batisimply")
        
        # R√©cup√©ration des chantiers modifi√©s dans Batigest
        postgres_cursor.execute("""
            SELECT code, date_debut, date_fin, nom_client, description, adr_chantier, 
                   cp_chantier, ville_chantier, total_mo
            FROM batigest_chantiers
            WHERE last_modified_batigest > COALESCE(last_modified_batisimply, '1970-01-01'::timestamp)
        """)
        
        # R√©cup√©ration des chantiers existants dans Batisimply
        response = requests.get(API_URL, headers=headers)
        if response.status_code != 200:
            return False, f"‚ùå Erreur lors de la r√©cup√©ration des chantiers Batisimply : {response.status_code}"

        batisimply_projects = {}
        for project in response.json().get("elements", []):
            code = project.get('projectCode')
            if code:
                batisimply_projects[code] = project

        # Synchronisation vers Batisimply
        updated_to_batisimply = 0
        for row in postgres_cursor.fetchall():
            try:
                code, date_debut, date_fin, nom_client, description, adr, cp, ville, total_mo = row
                
                # Pr√©paration des donn√©es pour l'API
                data = {
                    "address": {
                        "city": ville,
                        "countryCode": "FR",
                        "geoPoint": {
                            "xLon": 3.8777,
                            "yLat": 43.6119
                        },
                        "googleFormattedAddress": f"{adr}, {cp} {ville}, France",
                        "postalCode": cp,
                        "street": adr
                    },
                    "budget": {
                        "amount": 500000.0,
                        "currency": "EUR"
                    },
                    "endEstimated": date_fin.strftime("%Y-%m-%d") if date_fin else None,
                    "headQuarter": {
                        "id": 33
                    },
                    "hoursSold": total_mo,
                    "projectCode": code,
                    "comment": description,
                    "projectName": nom_client,
                    "customerName": nom_client,
                    "projectManager": "DEFINIR",
                    "startEstimated": date_debut.strftime("%Y-%m-%d") if date_debut else None,
                    "isArchived": False,
                    "isFinished": False,
                    "projectColor": "#9b1ff1"
                }

                # D√©termination de la m√©thode HTTP
                if code in batisimply_projects:
                    method = "PUT"
                    url = API_URL
                    # Inclure l'id dans le payload pour la mise √† jour
                    data["id"] = batisimply_projects[code].get("id")
                    print(f"‚Üí Mise √† jour du projet existant {code} (ID: {data['id']})")
                else:
                    method = "POST"
                    url = API_URL
                    print(f"‚Üí Cr√©ation d'un nouveau projet {code}")

                # Envoi √† l'API
                response = requests.request(method, url, headers=headers, data=json.dumps(data))
                if response.status_code in [200, 201]:
                    updated_to_batisimply += 1
                    # Mise √† jour du timestamp dans PostgreSQL
                    postgres_cursor.execute("""
                        UPDATE batigest_chantiers 
                        SET last_modified_batisimply = NOW()
                        WHERE code = %s
                    """, (code,))
                    print(f"‚úÖ Chantier {code} synchronis√© vers Batisimply")
                else:
                    print(f"‚ùå Erreur API pour le chantier {code} : {response.status_code} ‚Üí {response.text}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la synchronisation du chantier {code} vers Batisimply : {e}")

        # Validation des modifications
        postgres_conn.commit()
        postgres_cursor.close()
        postgres_conn.close()
        sqlserver_cursor.close()
        sqlserver_conn.close()

        print("\n=== FIN DE LA SYNCHRONISATION BATIGEST ‚Üí BATISIMPLY ===")

        # Pr√©paration du message final
        message = "‚úÖ Synchronisation Batigest ‚Üí Batisimply termin√©e :\n"
        message += f"- {updated_batigest} chantiers mis √† jour depuis Batigest vers PostgreSQL\n"
        message += f"- {updated_to_batisimply} chantiers synchronis√©s de PostgreSQL vers Batisimply"

        return True, message

    except Exception as e:
        print(f"\n‚ùå Erreur lors de la synchronisation : {e}")
        return False, f"‚ùå Erreur lors de la synchronisation : {e}"

# ============================================================================
# SYNCHRONISATION DE BATISIMPLY VERS BATIGEST
# ============================================================================

def sync_batisimply_to_batigest():
    """
    Synchronise les chantiers de Batisimply vers Batigest via PostgreSQL.
    
    Flux : Batisimply ‚Üí PostgreSQL ‚Üí Batigest (SQL Server)
    
    Returns:
        tuple: (bool, str)
            - bool: True si la synchronisation a r√©ussi, False sinon
            - str: Message d√©crivant le r√©sultat de l'op√©ration
    """
    try:
        print("\n=== D√âBUT DE LA SYNCHRONISATION BATISIMPLY ‚Üí BATIGEST ===")
        
        # R√©cup√©ration du token Batisimply
        token = recup_batisimply_token()
        if not token:
            return False, "‚ùå Impossible de continuer sans token Batisimply"

        # Configuration de l'API BatiSimply
        API_URL = "https://api.staging.batisimply.fr/api/project"
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }

        # Connexion aux bases de donn√©es
        creds = load_credentials()
        if not creds or "postgres" not in creds or "sqlserver" not in creds:
            return False, "‚ùå Informations de connexion manquantes"

        pg = creds["postgres"]
        sql = creds["sqlserver"]

        postgres_conn = connect_to_postgres(
            pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
        )
        sqlserver_conn = connect_to_sqlserver(
            sql["server"], sql["user"], sql["password"], sql["database"]
        )

        if not postgres_conn or not sqlserver_conn:
            return False, "‚ùå Connexion aux bases de donn√©es √©chou√©e"

        print("‚úÖ Connexions aux bases de donn√©es √©tablies")

        # 1. Synchronisation Batisimply ‚Üí PostgreSQL
        print("\nüîÑ Synchronisation Batisimply ‚Üí PostgreSQL")
        
        # R√©cup√©ration des chantiers depuis Batisimply
        response = requests.get(API_URL, headers=headers)
        if response.status_code != 200:
            return False, f"‚ùå Erreur lors de la r√©cup√©ration des chantiers Batisimply : {response.status_code}"

        batisimply_projects = response.json().get("elements", [])
        print(f"üìä {len(batisimply_projects)} chantiers r√©cup√©r√©s depuis Batisimply")

        # Mise √† jour de PostgreSQL avec les donn√©es de Batisimply
        postgres_cursor = postgres_conn.cursor()
        updated_batisimply = 0
        for project in batisimply_projects:
            try:
                code = project.get('projectCode')
                if not code:
                    continue

                # Pr√©paration des donn√©es
                data = {
                    'code': code,
                    'date_debut': project.get('startEstimated'),
                    'date_fin': project.get('endEstimated'),
                    'nom_client': project.get('customerName'),
                    'description': project.get('comment'),
                    'adr_chantier': project.get('address', {}).get('street'),
                    'cp_chantier': project.get('address', {}).get('postalCode'),
                    'ville_chantier': project.get('address', {}).get('city'),
                    'total_mo': project.get('hoursSold', 0)
                }

                # Mise √† jour dans PostgreSQL
                postgres_cursor.execute("""
                    INSERT INTO batigest_chantiers 
                    (code, date_debut, date_fin, nom_client, description, adr_chantier, 
                     cp_chantier, ville_chantier, total_mo, last_modified_batisimply)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                    ON CONFLICT (code) DO UPDATE SET 
                    date_debut = EXCLUDED.date_debut,
                    date_fin = EXCLUDED.date_fin,
                    nom_client = EXCLUDED.nom_client,
                    description = EXCLUDED.description,
                    adr_chantier = EXCLUDED.adr_chantier,
                    cp_chantier = EXCLUDED.cp_chantier,
                    ville_chantier = EXCLUDED.ville_chantier,
                    total_mo = EXCLUDED.total_mo,
                    last_modified_batisimply = NOW()
                """, (
                    data['code'], data['date_debut'], data['date_fin'],
                    data['nom_client'], data['description'], data['adr_chantier'],
                    data['cp_chantier'], data['ville_chantier'], data['total_mo']
                ))
                updated_batisimply += 1
                print(f"‚úÖ Chantier {code} mis √† jour dans PostgreSQL")
            except Exception as e:
                print(f"‚ùå Erreur lors de la mise √† jour du chantier {code} dans PostgreSQL : {e}")

        # 2. Synchronisation PostgreSQL ‚Üí Batigest
        print("\nüîÑ Synchronisation PostgreSQL ‚Üí Batigest")
        
        # R√©cup√©ration des chantiers modifi√©s dans Batisimply
        postgres_cursor.execute("""
            SELECT code, date_debut, date_fin, nom_client, description, adr_chantier, 
                   cp_chantier, ville_chantier
            FROM batigest_chantiers
            WHERE last_modified_batisimply > COALESCE(last_modified_batigest, '1970-01-01'::timestamp)
        """)
        
        # Mise √† jour dans Batigest
        sqlserver_cursor = sqlserver_conn.cursor()
        updated_to_batigest = 0
        for row in postgres_cursor.fetchall():
            try:
                code, date_debut, date_fin, nom_client, description, adr, cp, ville = row
                
                # Mise √† jour dans Batigest
                sqlserver_cursor.execute("""
                    UPDATE dbo.ChantierDef
                    SET DateDebut = ?,
                        DateFin = ?,
                        NomClient = ?,
                        Libelle = ?,
                        AdrChantier = ?,
                        CPChantier = ?,
                        VilleChantier = ?
                    WHERE Code = ?
                """, (date_debut, date_fin, nom_client, description, adr, cp, ville, code))
                
                updated_to_batigest += 1
                print(f"‚úÖ Chantier {code} mis √† jour dans Batigest")
            except Exception as e:
                print(f"‚ùå Erreur lors de la mise √† jour du chantier {code} dans Batigest : {e}")

        # Validation des modifications
        postgres_conn.commit()
        sqlserver_conn.commit()
        postgres_cursor.close()
        postgres_conn.close()
        sqlserver_cursor.close()
        sqlserver_conn.close()

        print("\n=== FIN DE LA SYNCHRONISATION BATISIMPLY ‚Üí BATIGEST ===")

        # Pr√©paration du message final
        message = "‚úÖ Synchronisation Batisimply ‚Üí Batigest termin√©e :\n"
        message += f"- {updated_batisimply} chantiers mis √† jour depuis Batisimply vers PostgreSQL\n"
        message += f"- {updated_to_batigest} chantiers synchronis√©s de PostgreSQL vers Batigest"

        return True, message

    except Exception as e:
        print(f"\n‚ùå Erreur lors de la synchronisation : {e}")
        return False, f"‚ùå Erreur lors de la synchronisation : {e}"

# ============================================================================
# INITIALISATION DE LA BASE DE DONN√âES
# ============================================================================

def init_postgres_table():
    """
    Initialise la table PostgreSQL avec les colonnes n√©cessaires pour le suivi des modifications.
    
    Cette fonction :
    1. V√©rifie si les colonnes de dates de modification existent
    2. Les ajoute si elles n'existent pas
    3. Met √† jour les dates existantes si n√©cessaire
    """
    try:
        # Connexion √† PostgreSQL
        creds = load_credentials()
        if not creds or "postgres" not in creds:
            print("‚ùå Informations PostgreSQL manquantes")
            return False

        pg = creds["postgres"]
        postgres_conn = connect_to_postgres(
            pg["host"], pg["user"], pg["password"], pg["database"], pg.get("port", "5432")
        )
        if not postgres_conn:
            print("‚ùå Connexion √† PostgreSQL √©chou√©e")
            return False

        postgres_cursor = postgres_conn.cursor()

        # V√©rification de l'existence des colonnes
        postgres_cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'batigest_chantiers'
        """)
        existing_columns = [row[0] for row in postgres_cursor.fetchall()]

        # Ajout des colonnes si elles n'existent pas
        if 'last_modified_batisimply' not in existing_columns:
            postgres_cursor.execute("""
                ALTER TABLE batigest_chantiers 
                ADD COLUMN last_modified_batisimply TIMESTAMP WITH TIME ZONE
            """)
            print("‚úÖ Colonne last_modified_batisimply ajout√©e")

        if 'last_modified_batigest' not in existing_columns:
            postgres_cursor.execute("""
                ALTER TABLE batigest_chantiers 
                ADD COLUMN last_modified_batigest TIMESTAMP WITH TIME ZONE
            """)
            print("‚úÖ Colonne last_modified_batigest ajout√©e")

        # Validation des modifications
        postgres_conn.commit()
        postgres_cursor.close()
        postgres_conn.close()

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la table : {e}")
        return False

# ============================================================================
    