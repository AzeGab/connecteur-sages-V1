#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script final pour tester la table REPARAT avec contournement des erreurs de version
"""

import sys
import os
from tabulate import tabulate

# Ajouter le r√©pertoire app au path pour importer les modules
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from services.connex import connect_to_hfsql, load_credentials

def test_reparat_final():
    """Teste la table REPARAT avec diff√©rentes approches"""
    print("üîç Test final de la table REPARAT")
    print("=" * 50)
    
    # Charger la configuration
    creds = load_credentials()
    if not creds or creds.get("software") != "codial" or "hfsql" not in creds:
        print("‚ùå Configuration HFSQL non trouv√©e")
        return False
    
    hfsql_config = creds["hfsql"]
    host_value = f"DSN={hfsql_config['dsn']}" if hfsql_config.get("dsn") else hfsql_config.get("host", "localhost")
    
    print(f"üîå Connexion √† HFSQL...")
    print(f"   DSN: {hfsql_config.get('dsn')}")
    print(f"   Base: {hfsql_config.get('database')}")
    
    conn = connect_to_hfsql(
        host_value,
        hfsql_config.get("user", "admin"),
        hfsql_config.get("password", ""),
        hfsql_config.get("database", "HFSQL"),
        hfsql_config.get("port", "4900")
    )
    
    if not conn:
        print("‚ùå √âchec de la connexion")
        return False
    
    print("‚úÖ Connexion r√©ussie")
    
    try:
        cursor = conn.cursor()
        
        # Test 1: Compter les enregistrements
        print("\nüìä Test 1: Compter les enregistrements")
        try:
            cursor.execute("SELECT COUNT(*) as total FROM REPARAT")
            result = cursor.fetchone()
            count = result[0] if result else 0
            print(f"   ‚úÖ Nombre d'enregistrements: {count}")
        except Exception as e:
            print(f"   ‚ùå Erreur comptage: {e}")
            return False
        
        # Test 2: R√©cup√©rer la structure
        print("\nüìã Test 2: Structure de la table")
        try:
            cursor.execute("SELECT TOP 1 * FROM REPARAT")
            columns = [description[0] for description in cursor.description]
            print(f"   ‚úÖ Colonnes trouv√©es: {len(columns)}")
            print(f"   üìù Premi√®res colonnes: {', '.join(columns[:10])}")
        except Exception as e:
            print(f"   ‚ùå Erreur structure: {e}")
            return False
        
        # Test 3: R√©cup√©rer des donn√©es avec diff√©rentes approches
        print("\nüìÑ Test 3: R√©cup√©ration des donn√©es")
        
        # Approche 1: Requ√™te simple avec colonnes sp√©cifiques
        try:
            print("   Approche 1: Colonnes sp√©cifiques")
            cursor.execute("SELECT TOP 3 R1CLEUNIK, NUMEROR, CODE, NOM FROM REPARAT")
            results = cursor.fetchall()
            
            if results:
                columns = [description[0] for description in cursor.description]
                print(f"   ‚úÖ {len(results)} enregistrement(s) r√©cup√©r√©(s)")
                
                table = tabulate(results, headers=columns, tablefmt="grid", stralign="left")
                print(table)
                return True
            else:
                print("   ‚ö†Ô∏è  Aucun r√©sultat")
        except Exception as e:
            print(f"   ‚ùå Erreur approche 1: {e}")
        
        # Approche 2: Requ√™te avec CAST pour √©viter les erreurs de conversion
        try:
            print("\n   Approche 2: Avec CAST")
            cursor.execute("SELECT TOP 3 CAST(R1CLEUNIK AS VARCHAR(50)), CAST(NUMEROR AS VARCHAR(50)), CODE, NOM FROM REPARAT")
            results = cursor.fetchall()
            
            if results:
                columns = [description[0] for description in cursor.description]
                print(f"   ‚úÖ {len(results)} enregistrement(s) r√©cup√©r√©(s)")
                
                table = tabulate(results, headers=columns, tablefmt="grid", stralign="left")
                print(table)
                return True
            else:
                print("   ‚ö†Ô∏è  Aucun r√©sultat")
        except Exception as e:
            print(f"   ‚ùå Erreur approche 2: {e}")
        
        # Approche 3: Requ√™te avec ISNULL pour g√©rer les valeurs NULL
        try:
            print("\n   Approche 3: Avec ISNULL")
            cursor.execute("SELECT TOP 3 ISNULL(CAST(R1CLEUNIK AS VARCHAR(50)), ''), ISNULL(CAST(NUMEROR AS VARCHAR(50)), ''), ISNULL(CODE, ''), ISNULL(NOM, '') FROM REPARAT")
            results = cursor.fetchall()
            
            if results:
                columns = [description[0] for description in cursor.description]
                print(f"   ‚úÖ {len(results)} enregistrement(s) r√©cup√©r√©(s)")
                
                table = tabulate(results, headers=columns, tablefmt="grid", stralign="left")
                print(table)
                return True
            else:
                print("   ‚ö†Ô∏è  Aucun r√©sultat")
        except Exception as e:
            print(f"   ‚ùå Erreur approche 3: {e}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ Test termin√©!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        if conn:
            conn.close()
        return False

def main():
    """Fonction principale"""
    print("üöÄ Test final de la table REPARAT")
    print("=" * 50)
    
    success = test_reparat_final()
    
    if success:
        print("\n‚úÖ Les donn√©es de REPARAT sont accessibles!")
        print("üí° Vous pouvez maintenant utiliser l'interface web pour voir les r√©sultats.")
    else:
        print("\n‚ùå Probl√®me d'acc√®s aux donn√©es REPARAT")
        print("üí° V√©rifiez la configuration HFSQL ou contactez l'administrateur.")

if __name__ == "__main__":
    main()
